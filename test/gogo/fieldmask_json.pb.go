// Code generated by protoc-gen-go-json. DO NOT EDIT.
// versions:
// - protoc-gen-go-json v0.0.0-dev
// - protoc             v3.9.1
// source: fieldmask.proto

package test

import (
	gogo "github.com/TheThingsIndustries/protoc-gen-go-json/gogo"
	jsonplugin "github.com/TheThingsIndustries/protoc-gen-go-json/jsonplugin"
)

// MarshalProtoJSON marshals the MessageWithFieldMask message to JSON.
func (x *MessageWithFieldMask) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			gogo.MarshalFieldMask(s, x.FieldMask)
		}
	}
	if x.Name != "" || s.HasField("name") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("name")
		s.WriteString(x.Name)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the MessageWithFieldMask to JSON.
func (x *MessageWithFieldMask) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageWithFieldMask message from JSON.
func (x *MessageWithFieldMask) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := gogo.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		case "name":
			s.AddField("name")
			x.Name = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the MessageWithFieldMask from JSON.
func (x *MessageWithFieldMask) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the MessageWithSubmessageWithFieldmask message to JSON.
func (x *MessageWithSubmessageWithFieldmask) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Submessage != nil || s.HasField("submessage") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("submessage")
		x.Submessage.MarshalProtoJSON(s.WithField("submessage"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the MessageWithSubmessageWithFieldmask to JSON.
func (x *MessageWithSubmessageWithFieldmask) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageWithSubmessageWithFieldmask message from JSON.
func (x *MessageWithSubmessageWithFieldmask) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "submessage":
			s.AddField("submessage")
			if s.ReadNil() {
				x.Submessage = nil
				return
			}
			x.Submessage = &MessageWithFieldMask{}
			x.Submessage.UnmarshalProtoJSON(s.WithField("submessage", false))
		}
	})
}

// UnmarshalJSON unmarshals the MessageWithSubmessageWithFieldmask from JSON.
func (x *MessageWithSubmessageWithFieldmask) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the MessageWithFieldmaskAndSubmessageWithFieldmask message to JSON.
func (x *MessageWithFieldmaskAndSubmessageWithFieldmask) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			gogo.MarshalFieldMask(s, x.FieldMask)
		}
	}
	if x.Submessage != nil || s.HasField("submessage") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("submessage")
		// NOTE: MessageWithoutFieldMask does not seem to implement MarshalProtoJSON.
		gogo.MarshalMessage(s, x.Submessage)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the MessageWithFieldmaskAndSubmessageWithFieldmask to JSON.
func (x *MessageWithFieldmaskAndSubmessageWithFieldmask) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageWithFieldmaskAndSubmessageWithFieldmask message from JSON.
func (x *MessageWithFieldmaskAndSubmessageWithFieldmask) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := gogo.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		case "submessage":
			s.AddField("submessage")
			if s.ReadNil() {
				x.Submessage = nil
				return
			}
			// NOTE: MessageWithoutFieldMask does not seem to implement UnmarshalProtoJSON.
			var v MessageWithoutFieldMask
			gogo.UnmarshalMessage(s, &v)
			x.Submessage = &v
		}
	})
}

// UnmarshalJSON unmarshals the MessageWithFieldmaskAndSubmessageWithFieldmask from JSON.
func (x *MessageWithFieldmaskAndSubmessageWithFieldmask) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the MessageWithFieldmaskAndSubmessageWithoutFieldmask message to JSON.
func (x *MessageWithFieldmaskAndSubmessageWithoutFieldmask) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.FieldMask != nil || s.HasField("field_mask") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask")
		if x.FieldMask == nil {
			s.WriteNil()
		} else {
			gogo.MarshalFieldMask(s, x.FieldMask)
		}
	}
	if x.Submessage != nil || s.HasField("submessage") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("submessage")
		x.Submessage.MarshalProtoJSON(s.WithField("submessage"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the MessageWithFieldmaskAndSubmessageWithoutFieldmask to JSON.
func (x *MessageWithFieldmaskAndSubmessageWithoutFieldmask) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageWithFieldmaskAndSubmessageWithoutFieldmask message from JSON.
func (x *MessageWithFieldmaskAndSubmessageWithoutFieldmask) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "field_mask", "fieldMask":
			s.AddField("field_mask")
			if s.ReadNil() {
				x.FieldMask = nil
				return
			}
			v := gogo.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMask = v
		case "submessage":
			s.AddField("submessage")
			if s.ReadNil() {
				x.Submessage = nil
				return
			}
			x.Submessage = &MessageWithFieldMask{}
			x.Submessage.UnmarshalProtoJSON(s.WithField("submessage", false))
		}
	})
}

// UnmarshalJSON unmarshals the MessageWithFieldmaskAndSubmessageWithoutFieldmask from JSON.
func (x *MessageWithFieldmaskAndSubmessageWithoutFieldmask) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the MessageWithSubmessageWithFieldmaskAndMarshaler message to JSON.
func (x *MessageWithSubmessageWithFieldmaskAndMarshaler) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Submessage != nil || s.HasField("submessage") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("submessage")
		x.Submessage.MarshalProtoJSON(s.WithField("submessage"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the MessageWithSubmessageWithFieldmaskAndMarshaler to JSON.
func (x *MessageWithSubmessageWithFieldmaskAndMarshaler) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageWithSubmessageWithFieldmaskAndMarshaler message from JSON.
func (x *MessageWithSubmessageWithFieldmaskAndMarshaler) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "submessage":
			s.AddField("submessage")
			if s.ReadNil() {
				x.Submessage = nil
				return
			}
			x.Submessage = &MessageWithFieldMask{}
			x.Submessage.UnmarshalProtoJSON(s.WithField("submessage", false))
		}
	})
}

// UnmarshalJSON unmarshals the MessageWithSubmessageWithFieldmaskAndMarshaler from JSON.
func (x *MessageWithSubmessageWithFieldmaskAndMarshaler) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}
