// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: scalars.proto

package test

import (
	fmt "fmt"
	_ "github.com/TheThingsIndustries/protoc-gen-go-json/annotations"
	proto "github.com/gogo/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MessageWithScalars struct {
	DoubleValue          float64   `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	DoubleValues         []float64 `protobuf:"fixed64,2,rep,packed,name=double_values,json=doubleValues,proto3" json:"double_values,omitempty"`
	FloatValue           float32   `protobuf:"fixed32,3,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	FloatValues          []float32 `protobuf:"fixed32,4,rep,packed,name=float_values,json=floatValues,proto3" json:"float_values,omitempty"`
	Int32Value           int32     `protobuf:"varint,5,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Int32Values          []int32   `protobuf:"varint,6,rep,packed,name=int32_values,json=int32Values,proto3" json:"int32_values,omitempty"`
	Int64Value           int64     `protobuf:"varint,7,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	Int64Values          []int64   `protobuf:"varint,8,rep,packed,name=int64_values,json=int64Values,proto3" json:"int64_values,omitempty"`
	Uint32Value          uint32    `protobuf:"varint,9,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	Uint32Values         []uint32  `protobuf:"varint,10,rep,packed,name=uint32_values,json=uint32Values,proto3" json:"uint32_values,omitempty"`
	Uint64Value          uint64    `protobuf:"varint,11,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	Uint64Values         []uint64  `protobuf:"varint,12,rep,packed,name=uint64_values,json=uint64Values,proto3" json:"uint64_values,omitempty"`
	Sint32Value          int32     `protobuf:"zigzag32,13,opt,name=sint32_value,json=sint32Value,proto3" json:"sint32_value,omitempty"`
	Sint32Values         []int32   `protobuf:"zigzag32,14,rep,packed,name=sint32_values,json=sint32Values,proto3" json:"sint32_values,omitempty"`
	Sint64Value          int64     `protobuf:"zigzag64,15,opt,name=sint64_value,json=sint64Value,proto3" json:"sint64_value,omitempty"`
	Sint64Values         []int64   `protobuf:"zigzag64,16,rep,packed,name=sint64_values,json=sint64Values,proto3" json:"sint64_values,omitempty"`
	Fixed32Value         uint32    `protobuf:"fixed32,17,opt,name=fixed32_value,json=fixed32Value,proto3" json:"fixed32_value,omitempty"`
	Fixed32Values        []uint32  `protobuf:"fixed32,18,rep,packed,name=fixed32_values,json=fixed32Values,proto3" json:"fixed32_values,omitempty"`
	Fixed64Value         uint64    `protobuf:"fixed64,19,opt,name=fixed64_value,json=fixed64Value,proto3" json:"fixed64_value,omitempty"`
	Fixed64Values        []uint64  `protobuf:"fixed64,20,rep,packed,name=fixed64_values,json=fixed64Values,proto3" json:"fixed64_values,omitempty"`
	Sfixed32Value        int32     `protobuf:"fixed32,21,opt,name=sfixed32_value,json=sfixed32Value,proto3" json:"sfixed32_value,omitempty"`
	Sfixed32Values       []int32   `protobuf:"fixed32,22,rep,packed,name=sfixed32_values,json=sfixed32Values,proto3" json:"sfixed32_values,omitempty"`
	Sfixed64Value        int64     `protobuf:"fixed64,23,opt,name=sfixed64_value,json=sfixed64Value,proto3" json:"sfixed64_value,omitempty"`
	Sfixed64Values       []int64   `protobuf:"fixed64,24,rep,packed,name=sfixed64_values,json=sfixed64Values,proto3" json:"sfixed64_values,omitempty"`
	BoolValue            bool      `protobuf:"varint,25,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	BoolValues           []bool    `protobuf:"varint,26,rep,packed,name=bool_values,json=boolValues,proto3" json:"bool_values,omitempty"`
	StringValue          string    `protobuf:"bytes,27,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	StringValues         []string  `protobuf:"bytes,28,rep,name=string_values,json=stringValues,proto3" json:"string_values,omitempty"`
	BytesValue           []byte    `protobuf:"bytes,29,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	BytesValues          [][]byte  `protobuf:"bytes,30,rep,name=bytes_values,json=bytesValues,proto3" json:"bytes_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MessageWithScalars) Reset()         { *m = MessageWithScalars{} }
func (m *MessageWithScalars) String() string { return proto.CompactTextString(m) }
func (*MessageWithScalars) ProtoMessage()    {}
func (*MessageWithScalars) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d1bcd1a4bdfc194, []int{0}
}
func (m *MessageWithScalars) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageWithScalars.Unmarshal(m, b)
}
func (m *MessageWithScalars) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageWithScalars.Marshal(b, m, deterministic)
}
func (m *MessageWithScalars) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageWithScalars.Merge(m, src)
}
func (m *MessageWithScalars) XXX_Size() int {
	return xxx_messageInfo_MessageWithScalars.Size(m)
}
func (m *MessageWithScalars) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageWithScalars.DiscardUnknown(m)
}

var xxx_messageInfo_MessageWithScalars proto.InternalMessageInfo

func (m *MessageWithScalars) GetDoubleValue() float64 {
	if m != nil {
		return m.DoubleValue
	}
	return 0
}

func (m *MessageWithScalars) GetDoubleValues() []float64 {
	if m != nil {
		return m.DoubleValues
	}
	return nil
}

func (m *MessageWithScalars) GetFloatValue() float32 {
	if m != nil {
		return m.FloatValue
	}
	return 0
}

func (m *MessageWithScalars) GetFloatValues() []float32 {
	if m != nil {
		return m.FloatValues
	}
	return nil
}

func (m *MessageWithScalars) GetInt32Value() int32 {
	if m != nil {
		return m.Int32Value
	}
	return 0
}

func (m *MessageWithScalars) GetInt32Values() []int32 {
	if m != nil {
		return m.Int32Values
	}
	return nil
}

func (m *MessageWithScalars) GetInt64Value() int64 {
	if m != nil {
		return m.Int64Value
	}
	return 0
}

func (m *MessageWithScalars) GetInt64Values() []int64 {
	if m != nil {
		return m.Int64Values
	}
	return nil
}

func (m *MessageWithScalars) GetUint32Value() uint32 {
	if m != nil {
		return m.Uint32Value
	}
	return 0
}

func (m *MessageWithScalars) GetUint32Values() []uint32 {
	if m != nil {
		return m.Uint32Values
	}
	return nil
}

func (m *MessageWithScalars) GetUint64Value() uint64 {
	if m != nil {
		return m.Uint64Value
	}
	return 0
}

func (m *MessageWithScalars) GetUint64Values() []uint64 {
	if m != nil {
		return m.Uint64Values
	}
	return nil
}

func (m *MessageWithScalars) GetSint32Value() int32 {
	if m != nil {
		return m.Sint32Value
	}
	return 0
}

func (m *MessageWithScalars) GetSint32Values() []int32 {
	if m != nil {
		return m.Sint32Values
	}
	return nil
}

func (m *MessageWithScalars) GetSint64Value() int64 {
	if m != nil {
		return m.Sint64Value
	}
	return 0
}

func (m *MessageWithScalars) GetSint64Values() []int64 {
	if m != nil {
		return m.Sint64Values
	}
	return nil
}

func (m *MessageWithScalars) GetFixed32Value() uint32 {
	if m != nil {
		return m.Fixed32Value
	}
	return 0
}

func (m *MessageWithScalars) GetFixed32Values() []uint32 {
	if m != nil {
		return m.Fixed32Values
	}
	return nil
}

func (m *MessageWithScalars) GetFixed64Value() uint64 {
	if m != nil {
		return m.Fixed64Value
	}
	return 0
}

func (m *MessageWithScalars) GetFixed64Values() []uint64 {
	if m != nil {
		return m.Fixed64Values
	}
	return nil
}

func (m *MessageWithScalars) GetSfixed32Value() int32 {
	if m != nil {
		return m.Sfixed32Value
	}
	return 0
}

func (m *MessageWithScalars) GetSfixed32Values() []int32 {
	if m != nil {
		return m.Sfixed32Values
	}
	return nil
}

func (m *MessageWithScalars) GetSfixed64Value() int64 {
	if m != nil {
		return m.Sfixed64Value
	}
	return 0
}

func (m *MessageWithScalars) GetSfixed64Values() []int64 {
	if m != nil {
		return m.Sfixed64Values
	}
	return nil
}

func (m *MessageWithScalars) GetBoolValue() bool {
	if m != nil {
		return m.BoolValue
	}
	return false
}

func (m *MessageWithScalars) GetBoolValues() []bool {
	if m != nil {
		return m.BoolValues
	}
	return nil
}

func (m *MessageWithScalars) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func (m *MessageWithScalars) GetStringValues() []string {
	if m != nil {
		return m.StringValues
	}
	return nil
}

func (m *MessageWithScalars) GetBytesValue() []byte {
	if m != nil {
		return m.BytesValue
	}
	return nil
}

func (m *MessageWithScalars) GetBytesValues() [][]byte {
	if m != nil {
		return m.BytesValues
	}
	return nil
}

type MessageWithOneofScalars struct {
	// Types that are valid to be assigned to Value:
	//	*MessageWithOneofScalars_DoubleValue
	//	*MessageWithOneofScalars_FloatValue
	//	*MessageWithOneofScalars_Int32Value
	//	*MessageWithOneofScalars_Int64Value
	//	*MessageWithOneofScalars_Uint32Value
	//	*MessageWithOneofScalars_Uint64Value
	//	*MessageWithOneofScalars_Sint32Value
	//	*MessageWithOneofScalars_Sint64Value
	//	*MessageWithOneofScalars_Fixed32Value
	//	*MessageWithOneofScalars_Fixed64Value
	//	*MessageWithOneofScalars_Sfixed32Value
	//	*MessageWithOneofScalars_Sfixed64Value
	//	*MessageWithOneofScalars_BoolValue
	//	*MessageWithOneofScalars_StringValue
	//	*MessageWithOneofScalars_BytesValue
	Value                isMessageWithOneofScalars_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *MessageWithOneofScalars) Reset()         { *m = MessageWithOneofScalars{} }
func (m *MessageWithOneofScalars) String() string { return proto.CompactTextString(m) }
func (*MessageWithOneofScalars) ProtoMessage()    {}
func (*MessageWithOneofScalars) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d1bcd1a4bdfc194, []int{1}
}
func (m *MessageWithOneofScalars) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageWithOneofScalars.Unmarshal(m, b)
}
func (m *MessageWithOneofScalars) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageWithOneofScalars.Marshal(b, m, deterministic)
}
func (m *MessageWithOneofScalars) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageWithOneofScalars.Merge(m, src)
}
func (m *MessageWithOneofScalars) XXX_Size() int {
	return xxx_messageInfo_MessageWithOneofScalars.Size(m)
}
func (m *MessageWithOneofScalars) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageWithOneofScalars.DiscardUnknown(m)
}

var xxx_messageInfo_MessageWithOneofScalars proto.InternalMessageInfo

type isMessageWithOneofScalars_Value interface {
	isMessageWithOneofScalars_Value()
}

type MessageWithOneofScalars_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3,oneof" json:"double_value,omitempty"`
}
type MessageWithOneofScalars_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3,oneof" json:"float_value,omitempty"`
}
type MessageWithOneofScalars_Int32Value struct {
	Int32Value int32 `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3,oneof" json:"int32_value,omitempty"`
}
type MessageWithOneofScalars_Int64Value struct {
	Int64Value int64 `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3,oneof" json:"int64_value,omitempty"`
}
type MessageWithOneofScalars_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,5,opt,name=uint32_value,json=uint32Value,proto3,oneof" json:"uint32_value,omitempty"`
}
type MessageWithOneofScalars_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,proto3,oneof" json:"uint64_value,omitempty"`
}
type MessageWithOneofScalars_Sint32Value struct {
	Sint32Value int32 `protobuf:"zigzag32,7,opt,name=sint32_value,json=sint32Value,proto3,oneof" json:"sint32_value,omitempty"`
}
type MessageWithOneofScalars_Sint64Value struct {
	Sint64Value int64 `protobuf:"zigzag64,8,opt,name=sint64_value,json=sint64Value,proto3,oneof" json:"sint64_value,omitempty"`
}
type MessageWithOneofScalars_Fixed32Value struct {
	Fixed32Value uint32 `protobuf:"fixed32,9,opt,name=fixed32_value,json=fixed32Value,proto3,oneof" json:"fixed32_value,omitempty"`
}
type MessageWithOneofScalars_Fixed64Value struct {
	Fixed64Value uint64 `protobuf:"fixed64,10,opt,name=fixed64_value,json=fixed64Value,proto3,oneof" json:"fixed64_value,omitempty"`
}
type MessageWithOneofScalars_Sfixed32Value struct {
	Sfixed32Value int32 `protobuf:"fixed32,11,opt,name=sfixed32_value,json=sfixed32Value,proto3,oneof" json:"sfixed32_value,omitempty"`
}
type MessageWithOneofScalars_Sfixed64Value struct {
	Sfixed64Value int64 `protobuf:"fixed64,12,opt,name=sfixed64_value,json=sfixed64Value,proto3,oneof" json:"sfixed64_value,omitempty"`
}
type MessageWithOneofScalars_BoolValue struct {
	BoolValue bool `protobuf:"varint,13,opt,name=bool_value,json=boolValue,proto3,oneof" json:"bool_value,omitempty"`
}
type MessageWithOneofScalars_StringValue struct {
	StringValue string `protobuf:"bytes,14,opt,name=string_value,json=stringValue,proto3,oneof" json:"string_value,omitempty"`
}
type MessageWithOneofScalars_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,15,opt,name=bytes_value,json=bytesValue,proto3,oneof" json:"bytes_value,omitempty"`
}

func (*MessageWithOneofScalars_DoubleValue) isMessageWithOneofScalars_Value()   {}
func (*MessageWithOneofScalars_FloatValue) isMessageWithOneofScalars_Value()    {}
func (*MessageWithOneofScalars_Int32Value) isMessageWithOneofScalars_Value()    {}
func (*MessageWithOneofScalars_Int64Value) isMessageWithOneofScalars_Value()    {}
func (*MessageWithOneofScalars_Uint32Value) isMessageWithOneofScalars_Value()   {}
func (*MessageWithOneofScalars_Uint64Value) isMessageWithOneofScalars_Value()   {}
func (*MessageWithOneofScalars_Sint32Value) isMessageWithOneofScalars_Value()   {}
func (*MessageWithOneofScalars_Sint64Value) isMessageWithOneofScalars_Value()   {}
func (*MessageWithOneofScalars_Fixed32Value) isMessageWithOneofScalars_Value()  {}
func (*MessageWithOneofScalars_Fixed64Value) isMessageWithOneofScalars_Value()  {}
func (*MessageWithOneofScalars_Sfixed32Value) isMessageWithOneofScalars_Value() {}
func (*MessageWithOneofScalars_Sfixed64Value) isMessageWithOneofScalars_Value() {}
func (*MessageWithOneofScalars_BoolValue) isMessageWithOneofScalars_Value()     {}
func (*MessageWithOneofScalars_StringValue) isMessageWithOneofScalars_Value()   {}
func (*MessageWithOneofScalars_BytesValue) isMessageWithOneofScalars_Value()    {}

func (m *MessageWithOneofScalars) GetValue() isMessageWithOneofScalars_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *MessageWithOneofScalars) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*MessageWithOneofScalars_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *MessageWithOneofScalars) GetFloatValue() float32 {
	if x, ok := m.GetValue().(*MessageWithOneofScalars_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *MessageWithOneofScalars) GetInt32Value() int32 {
	if x, ok := m.GetValue().(*MessageWithOneofScalars_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (m *MessageWithOneofScalars) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*MessageWithOneofScalars_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *MessageWithOneofScalars) GetUint32Value() uint32 {
	if x, ok := m.GetValue().(*MessageWithOneofScalars_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (m *MessageWithOneofScalars) GetUint64Value() uint64 {
	if x, ok := m.GetValue().(*MessageWithOneofScalars_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (m *MessageWithOneofScalars) GetSint32Value() int32 {
	if x, ok := m.GetValue().(*MessageWithOneofScalars_Sint32Value); ok {
		return x.Sint32Value
	}
	return 0
}

func (m *MessageWithOneofScalars) GetSint64Value() int64 {
	if x, ok := m.GetValue().(*MessageWithOneofScalars_Sint64Value); ok {
		return x.Sint64Value
	}
	return 0
}

func (m *MessageWithOneofScalars) GetFixed32Value() uint32 {
	if x, ok := m.GetValue().(*MessageWithOneofScalars_Fixed32Value); ok {
		return x.Fixed32Value
	}
	return 0
}

func (m *MessageWithOneofScalars) GetFixed64Value() uint64 {
	if x, ok := m.GetValue().(*MessageWithOneofScalars_Fixed64Value); ok {
		return x.Fixed64Value
	}
	return 0
}

func (m *MessageWithOneofScalars) GetSfixed32Value() int32 {
	if x, ok := m.GetValue().(*MessageWithOneofScalars_Sfixed32Value); ok {
		return x.Sfixed32Value
	}
	return 0
}

func (m *MessageWithOneofScalars) GetSfixed64Value() int64 {
	if x, ok := m.GetValue().(*MessageWithOneofScalars_Sfixed64Value); ok {
		return x.Sfixed64Value
	}
	return 0
}

func (m *MessageWithOneofScalars) GetBoolValue() bool {
	if x, ok := m.GetValue().(*MessageWithOneofScalars_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *MessageWithOneofScalars) GetStringValue() string {
	if x, ok := m.GetValue().(*MessageWithOneofScalars_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *MessageWithOneofScalars) GetBytesValue() []byte {
	if x, ok := m.GetValue().(*MessageWithOneofScalars_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*MessageWithOneofScalars) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*MessageWithOneofScalars_DoubleValue)(nil),
		(*MessageWithOneofScalars_FloatValue)(nil),
		(*MessageWithOneofScalars_Int32Value)(nil),
		(*MessageWithOneofScalars_Int64Value)(nil),
		(*MessageWithOneofScalars_Uint32Value)(nil),
		(*MessageWithOneofScalars_Uint64Value)(nil),
		(*MessageWithOneofScalars_Sint32Value)(nil),
		(*MessageWithOneofScalars_Sint64Value)(nil),
		(*MessageWithOneofScalars_Fixed32Value)(nil),
		(*MessageWithOneofScalars_Fixed64Value)(nil),
		(*MessageWithOneofScalars_Sfixed32Value)(nil),
		(*MessageWithOneofScalars_Sfixed64Value)(nil),
		(*MessageWithOneofScalars_BoolValue)(nil),
		(*MessageWithOneofScalars_StringValue)(nil),
		(*MessageWithOneofScalars_BytesValue)(nil),
	}
}

type MessageWithScalarMaps struct {
	StringDoubleMap      map[string]float64 `protobuf:"bytes,1,rep,name=string_double_map,json=stringDoubleMap,proto3" json:"string_double_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	StringFloatMap       map[string]float32 `protobuf:"bytes,3,rep,name=string_float_map,json=stringFloatMap,proto3" json:"string_float_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	StringInt32Map       map[string]int32   `protobuf:"bytes,5,rep,name=string_int32_map,json=stringInt32Map,proto3" json:"string_int32_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Int32StringMap       map[int32]string   `protobuf:"bytes,6,rep,name=int32_string_map,json=int32StringMap,proto3" json:"int32_string_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringInt64Map       map[string]int64   `protobuf:"bytes,7,rep,name=string_int64_map,json=stringInt64Map,proto3" json:"string_int64_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Int64StringMap       map[int64]string   `protobuf:"bytes,8,rep,name=int64_string_map,json=int64StringMap,proto3" json:"int64_string_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringUint32Map      map[string]uint32  `protobuf:"bytes,9,rep,name=string_uint32_map,json=stringUint32Map,proto3" json:"string_uint32_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Uint32StringMap      map[uint32]string  `protobuf:"bytes,10,rep,name=uint32_string_map,json=uint32StringMap,proto3" json:"uint32_string_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringUint64Map      map[string]uint64  `protobuf:"bytes,11,rep,name=string_uint64_map,json=stringUint64Map,proto3" json:"string_uint64_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	Uint64StringMap      map[uint64]string  `protobuf:"bytes,12,rep,name=uint64_string_map,json=uint64StringMap,proto3" json:"uint64_string_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringSint32Map      map[string]int32   `protobuf:"bytes,13,rep,name=string_sint32_map,json=stringSint32Map,proto3" json:"string_sint32_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag32,2,opt,name=value,proto3"`
	Sint32StringMap      map[int32]string   `protobuf:"bytes,14,rep,name=sint32_string_map,json=sint32StringMap,proto3" json:"sint32_string_map,omitempty" protobuf_key:"zigzag32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringSint64Map      map[string]int64   `protobuf:"bytes,15,rep,name=string_sint64_map,json=stringSint64Map,proto3" json:"string_sint64_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"zigzag64,2,opt,name=value,proto3"`
	Sint64StringMap      map[int64]string   `protobuf:"bytes,16,rep,name=sint64_string_map,json=sint64StringMap,proto3" json:"sint64_string_map,omitempty" protobuf_key:"zigzag64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringFixed32Map     map[string]uint32  `protobuf:"bytes,17,rep,name=string_fixed32_map,json=stringFixed32Map,proto3" json:"string_fixed32_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Fixed32StringMap     map[uint32]string  `protobuf:"bytes,18,rep,name=fixed32_string_map,json=fixed32StringMap,proto3" json:"fixed32_string_map,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringFixed64Map     map[string]uint64  `protobuf:"bytes,19,rep,name=string_fixed64_map,json=stringFixed64Map,proto3" json:"string_fixed64_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Fixed64StringMap     map[uint64]string  `protobuf:"bytes,20,rep,name=fixed64_string_map,json=fixed64StringMap,proto3" json:"fixed64_string_map,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringSfixed32Map    map[string]int32   `protobuf:"bytes,21,rep,name=string_sfixed32_map,json=stringSfixed32Map,proto3" json:"string_sfixed32_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
	Sfixed32StringMap    map[int32]string   `protobuf:"bytes,22,rep,name=sfixed32_string_map,json=sfixed32StringMap,proto3" json:"sfixed32_string_map,omitempty" protobuf_key:"fixed32,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringSfixed64Map    map[string]int64   `protobuf:"bytes,23,rep,name=string_sfixed64_map,json=stringSfixed64Map,proto3" json:"string_sfixed64_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	Sfixed64StringMap    map[int64]string   `protobuf:"bytes,24,rep,name=sfixed64_string_map,json=sfixed64StringMap,proto3" json:"sfixed64_string_map,omitempty" protobuf_key:"fixed64,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringBoolMap        map[string]bool    `protobuf:"bytes,25,rep,name=string_bool_map,json=stringBoolMap,proto3" json:"string_bool_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	BoolStringMap        map[bool]string    `protobuf:"bytes,26,rep,name=bool_string_map,json=boolStringMap,proto3" json:"bool_string_map,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringStringMap      map[string]string  `protobuf:"bytes,27,rep,name=string_string_map,json=stringStringMap,proto3" json:"string_string_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringBytesMap       map[string][]byte  `protobuf:"bytes,29,rep,name=string_bytes_map,json=stringBytesMap,proto3" json:"string_bytes_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MessageWithScalarMaps) Reset()         { *m = MessageWithScalarMaps{} }
func (m *MessageWithScalarMaps) String() string { return proto.CompactTextString(m) }
func (*MessageWithScalarMaps) ProtoMessage()    {}
func (*MessageWithScalarMaps) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d1bcd1a4bdfc194, []int{2}
}
func (m *MessageWithScalarMaps) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MessageWithScalarMaps.Unmarshal(m, b)
}
func (m *MessageWithScalarMaps) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MessageWithScalarMaps.Marshal(b, m, deterministic)
}
func (m *MessageWithScalarMaps) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageWithScalarMaps.Merge(m, src)
}
func (m *MessageWithScalarMaps) XXX_Size() int {
	return xxx_messageInfo_MessageWithScalarMaps.Size(m)
}
func (m *MessageWithScalarMaps) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageWithScalarMaps.DiscardUnknown(m)
}

var xxx_messageInfo_MessageWithScalarMaps proto.InternalMessageInfo

func (m *MessageWithScalarMaps) GetStringDoubleMap() map[string]float64 {
	if m != nil {
		return m.StringDoubleMap
	}
	return nil
}

func (m *MessageWithScalarMaps) GetStringFloatMap() map[string]float32 {
	if m != nil {
		return m.StringFloatMap
	}
	return nil
}

func (m *MessageWithScalarMaps) GetStringInt32Map() map[string]int32 {
	if m != nil {
		return m.StringInt32Map
	}
	return nil
}

func (m *MessageWithScalarMaps) GetInt32StringMap() map[int32]string {
	if m != nil {
		return m.Int32StringMap
	}
	return nil
}

func (m *MessageWithScalarMaps) GetStringInt64Map() map[string]int64 {
	if m != nil {
		return m.StringInt64Map
	}
	return nil
}

func (m *MessageWithScalarMaps) GetInt64StringMap() map[int64]string {
	if m != nil {
		return m.Int64StringMap
	}
	return nil
}

func (m *MessageWithScalarMaps) GetStringUint32Map() map[string]uint32 {
	if m != nil {
		return m.StringUint32Map
	}
	return nil
}

func (m *MessageWithScalarMaps) GetUint32StringMap() map[uint32]string {
	if m != nil {
		return m.Uint32StringMap
	}
	return nil
}

func (m *MessageWithScalarMaps) GetStringUint64Map() map[string]uint64 {
	if m != nil {
		return m.StringUint64Map
	}
	return nil
}

func (m *MessageWithScalarMaps) GetUint64StringMap() map[uint64]string {
	if m != nil {
		return m.Uint64StringMap
	}
	return nil
}

func (m *MessageWithScalarMaps) GetStringSint32Map() map[string]int32 {
	if m != nil {
		return m.StringSint32Map
	}
	return nil
}

func (m *MessageWithScalarMaps) GetSint32StringMap() map[int32]string {
	if m != nil {
		return m.Sint32StringMap
	}
	return nil
}

func (m *MessageWithScalarMaps) GetStringSint64Map() map[string]int64 {
	if m != nil {
		return m.StringSint64Map
	}
	return nil
}

func (m *MessageWithScalarMaps) GetSint64StringMap() map[int64]string {
	if m != nil {
		return m.Sint64StringMap
	}
	return nil
}

func (m *MessageWithScalarMaps) GetStringFixed32Map() map[string]uint32 {
	if m != nil {
		return m.StringFixed32Map
	}
	return nil
}

func (m *MessageWithScalarMaps) GetFixed32StringMap() map[uint32]string {
	if m != nil {
		return m.Fixed32StringMap
	}
	return nil
}

func (m *MessageWithScalarMaps) GetStringFixed64Map() map[string]uint64 {
	if m != nil {
		return m.StringFixed64Map
	}
	return nil
}

func (m *MessageWithScalarMaps) GetFixed64StringMap() map[uint64]string {
	if m != nil {
		return m.Fixed64StringMap
	}
	return nil
}

func (m *MessageWithScalarMaps) GetStringSfixed32Map() map[string]int32 {
	if m != nil {
		return m.StringSfixed32Map
	}
	return nil
}

func (m *MessageWithScalarMaps) GetSfixed32StringMap() map[int32]string {
	if m != nil {
		return m.Sfixed32StringMap
	}
	return nil
}

func (m *MessageWithScalarMaps) GetStringSfixed64Map() map[string]int64 {
	if m != nil {
		return m.StringSfixed64Map
	}
	return nil
}

func (m *MessageWithScalarMaps) GetSfixed64StringMap() map[int64]string {
	if m != nil {
		return m.Sfixed64StringMap
	}
	return nil
}

func (m *MessageWithScalarMaps) GetStringBoolMap() map[string]bool {
	if m != nil {
		return m.StringBoolMap
	}
	return nil
}

func (m *MessageWithScalarMaps) GetBoolStringMap() map[bool]string {
	if m != nil {
		return m.BoolStringMap
	}
	return nil
}

func (m *MessageWithScalarMaps) GetStringStringMap() map[string]string {
	if m != nil {
		return m.StringStringMap
	}
	return nil
}

func (m *MessageWithScalarMaps) GetStringBytesMap() map[string][]byte {
	if m != nil {
		return m.StringBytesMap
	}
	return nil
}

func init() {
	proto.RegisterType((*MessageWithScalars)(nil), "thethings.json.test.MessageWithScalars")
	proto.RegisterType((*MessageWithOneofScalars)(nil), "thethings.json.test.MessageWithOneofScalars")
	proto.RegisterType((*MessageWithScalarMaps)(nil), "thethings.json.test.MessageWithScalarMaps")
	proto.RegisterMapType((map[bool]string)(nil), "thethings.json.test.MessageWithScalarMaps.BoolStringMapEntry")
	proto.RegisterMapType((map[uint32]string)(nil), "thethings.json.test.MessageWithScalarMaps.Fixed32StringMapEntry")
	proto.RegisterMapType((map[uint64]string)(nil), "thethings.json.test.MessageWithScalarMaps.Fixed64StringMapEntry")
	proto.RegisterMapType((map[int32]string)(nil), "thethings.json.test.MessageWithScalarMaps.Int32StringMapEntry")
	proto.RegisterMapType((map[int64]string)(nil), "thethings.json.test.MessageWithScalarMaps.Int64StringMapEntry")
	proto.RegisterMapType((map[int32]string)(nil), "thethings.json.test.MessageWithScalarMaps.Sfixed32StringMapEntry")
	proto.RegisterMapType((map[int64]string)(nil), "thethings.json.test.MessageWithScalarMaps.Sfixed64StringMapEntry")
	proto.RegisterMapType((map[int32]string)(nil), "thethings.json.test.MessageWithScalarMaps.Sint32StringMapEntry")
	proto.RegisterMapType((map[int64]string)(nil), "thethings.json.test.MessageWithScalarMaps.Sint64StringMapEntry")
	proto.RegisterMapType((map[string]bool)(nil), "thethings.json.test.MessageWithScalarMaps.StringBoolMapEntry")
	proto.RegisterMapType((map[string][]byte)(nil), "thethings.json.test.MessageWithScalarMaps.StringBytesMapEntry")
	proto.RegisterMapType((map[string]float64)(nil), "thethings.json.test.MessageWithScalarMaps.StringDoubleMapEntry")
	proto.RegisterMapType((map[string]uint32)(nil), "thethings.json.test.MessageWithScalarMaps.StringFixed32MapEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "thethings.json.test.MessageWithScalarMaps.StringFixed64MapEntry")
	proto.RegisterMapType((map[string]float32)(nil), "thethings.json.test.MessageWithScalarMaps.StringFloatMapEntry")
	proto.RegisterMapType((map[string]int32)(nil), "thethings.json.test.MessageWithScalarMaps.StringInt32MapEntry")
	proto.RegisterMapType((map[string]int64)(nil), "thethings.json.test.MessageWithScalarMaps.StringInt64MapEntry")
	proto.RegisterMapType((map[string]int32)(nil), "thethings.json.test.MessageWithScalarMaps.StringSfixed32MapEntry")
	proto.RegisterMapType((map[string]int64)(nil), "thethings.json.test.MessageWithScalarMaps.StringSfixed64MapEntry")
	proto.RegisterMapType((map[string]int32)(nil), "thethings.json.test.MessageWithScalarMaps.StringSint32MapEntry")
	proto.RegisterMapType((map[string]int64)(nil), "thethings.json.test.MessageWithScalarMaps.StringSint64MapEntry")
	proto.RegisterMapType((map[string]string)(nil), "thethings.json.test.MessageWithScalarMaps.StringStringMapEntry")
	proto.RegisterMapType((map[string]uint32)(nil), "thethings.json.test.MessageWithScalarMaps.StringUint32MapEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "thethings.json.test.MessageWithScalarMaps.StringUint64MapEntry")
	proto.RegisterMapType((map[uint32]string)(nil), "thethings.json.test.MessageWithScalarMaps.Uint32StringMapEntry")
	proto.RegisterMapType((map[uint64]string)(nil), "thethings.json.test.MessageWithScalarMaps.Uint64StringMapEntry")
}

func init() { proto.RegisterFile("scalars.proto", fileDescriptor_5d1bcd1a4bdfc194) }

var fileDescriptor_5d1bcd1a4bdfc194 = []byte{
	// 1413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x59, 0xed, 0x6e, 0xdb, 0x36,
	0x17, 0x8e, 0x2c, 0x7f, 0x52, 0x92, 0x3f, 0x94, 0xa4, 0x55, 0xd3, 0xb7, 0x6f, 0x99, 0x64, 0xc3,
	0xf8, 0x27, 0x0e, 0xd0, 0x1a, 0xc6, 0x30, 0x60, 0x6b, 0x9b, 0x75, 0x43, 0xfa, 0x23, 0x18, 0x40,
	0xb7, 0x1b, 0xb0, 0x3f, 0x85, 0x9d, 0xc8, 0x1f, 0xab, 0x2b, 0x65, 0xa1, 0x34, 0x2c, 0x97, 0xb2,
	0x7b, 0xda, 0x6e, 0x64, 0x57, 0x31, 0x90, 0xa2, 0x24, 0x92, 0x62, 0x22, 0xcb, 0xf9, 0xd7, 0x1e,
	0x1d, 0x3c, 0xcf, 0x73, 0xf8, 0x9c, 0x73, 0x48, 0x23, 0xc0, 0x21, 0x97, 0xd3, 0xf5, 0xf4, 0x86,
	0x0c, 0xaf, 0x6f, 0xc2, 0x28, 0x74, 0x77, 0xa3, 0xa5, 0x1f, 0x2d, 0x57, 0xc1, 0x82, 0x0c, 0x7f,
	0x23, 0x61, 0x30, 0x8c, 0x7c, 0x12, 0x1d, 0x0c, 0xa6, 0x41, 0x10, 0x46, 0xd3, 0x68, 0x15, 0x06,
	0x3c, 0xef, 0xe8, 0xef, 0x36, 0x70, 0x2f, 0x7c, 0x42, 0xa6, 0x0b, 0xff, 0x97, 0x55, 0xb4, 0x9c,
	0x24, 0x20, 0xee, 0x21, 0xb0, 0xaf, 0xc2, 0x78, 0xb6, 0xf6, 0x3f, 0xfe, 0x31, 0x5d, 0xc7, 0xbe,
	0x67, 0x40, 0x03, 0x19, 0xd8, 0x4a, 0x62, 0x3f, 0xd3, 0x90, 0x7b, 0x0c, 0x1c, 0x31, 0x85, 0x78,
	0x35, 0x68, 0x22, 0x03, 0xdb, 0x42, 0x0e, 0x71, 0x9f, 0x03, 0x6b, 0xbe, 0x0e, 0xa7, 0x11, 0x87,
	0x31, 0xa1, 0x81, 0x6a, 0x18, 0xb0, 0x50, 0x82, 0x72, 0x08, 0x6c, 0x21, 0x81, 0x78, 0x75, 0x68,
	0xa2, 0x1a, 0xb6, 0xf2, 0x0c, 0x86, 0xb1, 0x0a, 0xa2, 0x97, 0x2f, 0x38, 0x46, 0x03, 0x1a, 0xa8,
	0x81, 0x01, 0x0b, 0x65, 0x18, 0x42, 0x02, 0xf1, 0x9a, 0xd0, 0x44, 0x0d, 0x6c, 0xe5, 0x19, 0x29,
	0xc6, 0x78, 0xc4, 0x31, 0x5a, 0xd0, 0x40, 0x26, 0xc3, 0x18, 0x8f, 0x44, 0x8c, 0x34, 0x81, 0x78,
	0x6d, 0x68, 0x22, 0x13, 0x5b, 0x79, 0x06, 0x3b, 0x93, 0x58, 0x14, 0xd2, 0x81, 0x06, 0x72, 0xb0,
	0x15, 0x0b, 0x4a, 0x8e, 0x81, 0x13, 0x4b, 0x52, 0x00, 0x34, 0x91, 0x83, 0xed, 0x58, 0xd4, 0xc2,
	0x71, 0x32, 0x31, 0x16, 0x34, 0x50, 0x3d, 0xc1, 0x49, 0xd5, 0x70, 0x9c, 0x5c, 0x8e, 0x0d, 0x4d,
	0x54, 0xc7, 0x76, 0xac, 0xe8, 0x21, 0xa2, 0x1e, 0x07, 0x1a, 0x68, 0x80, 0x2d, 0x22, 0xeb, 0x21,
	0x92, 0x9e, 0x2e, 0x34, 0xd1, 0x00, 0xdb, 0x44, 0xd1, 0x43, 0x44, 0x3d, 0x3d, 0x68, 0x20, 0x37,
	0xc1, 0x11, 0xf4, 0x10, 0x49, 0x4f, 0x1f, 0x9a, 0xc8, 0xc5, 0x36, 0x11, 0xf5, 0x1c, 0x03, 0x67,
	0xbe, 0xfa, 0xd3, 0xbf, 0xca, 0x04, 0x0d, 0xa0, 0x81, 0x5a, 0xd8, 0xe6, 0xc1, 0x04, 0xe9, 0x4b,
	0xd0, 0x95, 0x92, 0x88, 0xe7, 0x42, 0x13, 0xb5, 0xb0, 0x23, 0x66, 0xe5, 0x58, 0x99, 0xa8, 0x5d,
	0x68, 0xa0, 0x26, 0xc7, 0x4a, 0x55, 0xa5, 0x58, 0xb9, 0xac, 0x3d, 0x68, 0xa2, 0x26, 0x76, 0xc4,
	0x2c, 0x42, 0xd3, 0x88, 0x2c, 0x6c, 0x1f, 0x1a, 0xa8, 0x87, 0x1d, 0x22, 0x29, 0xfb, 0x0a, 0xf4,
	0x88, 0x22, 0xed, 0x11, 0x34, 0x51, 0x0f, 0x77, 0x89, 0xac, 0x2d, 0xc3, 0xcb, 0xc4, 0x3d, 0x86,
	0x06, 0xea, 0xa7, 0x78, 0xa9, 0xba, 0x0c, 0x2f, 0x97, 0xe7, 0x41, 0x13, 0xf5, 0x71, 0x97, 0xc8,
	0xfa, 0x9e, 0x01, 0x30, 0x0b, 0xc3, 0x35, 0xc7, 0x7a, 0x02, 0x0d, 0xd4, 0xc6, 0x1d, 0x1a, 0x49,
	0x70, 0x9e, 0x03, 0x2b, 0xff, 0x4c, 0xbc, 0x03, 0x68, 0xa2, 0x36, 0x06, 0xd9, 0xf7, 0xc4, 0xbf,
	0xe8, 0x66, 0x15, 0x2c, 0x38, 0xc2, 0x53, 0x68, 0xa0, 0x0e, 0xb6, 0x92, 0x58, 0xee, 0x9f, 0x90,
	0x42, 0xbc, 0xff, 0x41, 0x13, 0x75, 0xb0, 0x2d, 0xe4, 0xb0, 0x19, 0x99, 0xdd, 0x46, 0x3e, 0xe1,
	0x30, 0xcf, 0xa0, 0x81, 0x6c, 0x0c, 0x58, 0x28, 0x9b, 0x11, 0x21, 0x81, 0x78, 0xff, 0x87, 0x26,
	0xb2, 0xb1, 0x95, 0x67, 0x90, 0xa3, 0x7f, 0xea, 0xe0, 0xb1, 0xb0, 0x4e, 0x7e, 0x0a, 0xfc, 0x70,
	0x9e, 0xee, 0x94, 0x63, 0xdd, 0x4e, 0x39, 0xdf, 0x91, 0xb7, 0xca, 0xa1, 0xbc, 0x30, 0x6a, 0x74,
	0x61, 0x9c, 0xef, 0x28, 0x2b, 0x43, 0xda, 0x07, 0x74, 0xa7, 0x34, 0x68, 0x8a, 0xb4, 0x11, 0xa4,
	0x71, 0xaf, 0xd3, 0x71, 0xe7, 0x29, 0x79, 0x4b, 0xcb, 0xd3, 0x4c, 0xd7, 0x8a, 0x43, 0xd5, 0xc8,
	0xf3, 0x2c, 0x8f, 0x6a, 0x93, 0x8e, 0x6a, 0x9a, 0x24, 0x20, 0x49, 0x73, 0x48, 0x97, 0xcb, 0x80,
	0x26, 0xc9, 0x93, 0x28, 0x0f, 0x59, 0x9b, 0x0e, 0x59, 0x9a, 0x94, 0x37, 0xb4, 0x32, 0x41, 0x74,
	0xc5, 0xb4, 0xce, 0x77, 0x0a, 0x33, 0xa4, 0x0c, 0x07, 0xa0, 0xc3, 0x91, 0xa5, 0xe5, 0x0d, 0xa8,
	0xf6, 0x3d, 0xdd, 0x34, 0xbd, 0xf3, 0x9d, 0x62, 0xe7, 0xab, 0x0d, 0x6d, 0xd3, 0x86, 0xce, 0x13,
	0x53, 0xc4, 0xe7, 0x52, 0xa7, 0xd2, 0x7d, 0xd3, 0x3e, 0xdf, 0x11, 0x7b, 0xf5, 0x58, 0x69, 0xc5,
	0x2e, 0x6d, 0x45, 0x56, 0xa5, 0xd0, 0x8c, 0x87, 0x72, 0x9f, 0xd1, 0x75, 0x63, 0x53, 0x73, 0xf2,
	0x3e, 0x3a, 0x6b, 0x81, 0x06, 0xfb, 0x78, 0xf4, 0xd7, 0x17, 0x60, 0xbf, 0x70, 0x3d, 0x5d, 0x4c,
	0xaf, 0x89, 0xfb, 0x09, 0x0c, 0x38, 0x15, 0x6f, 0xaa, 0xcf, 0xd3, 0x6b, 0xcf, 0x80, 0x26, 0xb2,
	0x5e, 0xbc, 0x1a, 0x6a, 0x2e, 0xbf, 0xa1, 0x16, 0x66, 0x38, 0x61, 0x18, 0x6f, 0x19, 0xc4, 0xc5,
	0xf4, 0xfa, 0x87, 0x20, 0xba, 0xb9, 0xc5, 0x3d, 0x22, 0x47, 0xdd, 0x25, 0xe8, 0x73, 0xb2, 0xa4,
	0x39, 0x29, 0x97, 0xc9, 0xb8, 0xbe, 0xab, 0xcc, 0xf5, 0x23, 0x45, 0xc8, 0xa8, 0xba, 0x44, 0x0a,
	0x0a, 0x4c, 0x49, 0x4b, 0x51, 0xa6, 0xc6, 0x96, 0x4c, 0xef, 0x28, 0x82, 0xca, 0x94, 0x06, 0x29,
	0x53, 0x42, 0xc1, 0xf9, 0x28, 0x53, 0xb3, 0x32, 0x13, 0x83, 0x4b, 0xe8, 0x72, 0xa6, 0x95, 0x14,
	0x94, 0x6b, 0x1a, 0x8f, 0x18, 0x53, 0x6b, 0xfb, 0x9a, 0xc6, 0x23, 0x4d, 0x4d, 0x2c, 0xc8, 0x6b,
	0x1a, 0x8f, 0xc4, 0x9a, 0xda, 0xdb, 0xd4, 0x34, 0x1e, 0x69, 0x6a, 0x12, 0x82, 0x42, 0xfb, 0xc5,
	0xb9, 0x51, 0x9d, 0x2d, 0xdb, 0xef, 0xc3, 0x4a, 0x72, 0x8a, 0xb7, 0x5f, 0x16, 0xa5, 0x64, 0x71,
	0xc1, 0x2b, 0x50, 0x99, 0xec, 0xc3, 0x4a, 0x63, 0x56, 0x2f, 0x56, 0xdc, 0x92, 0x2b, 0xe3, 0x76,
	0x59, 0x0f, 0xa8, 0x4c, 0xf0, 0x4b, 0xa8, 0x2c, 0x31, 0x8c, 0x57, 0x26, 0x3b, 0x66, 0x6f, 0x55,
	0x59, 0xc1, 0xb2, 0x5e, 0x7c, 0xa7, 0x67, 0x24, 0xf7, 0xcc, 0xd9, 0xb2, 0xb2, 0x89, 0xd6, 0xb3,
	0x89, 0xe8, 0x19, 0x29, 0x78, 0xd6, 0xad, 0x4e, 0xa6, 0xf5, 0x8c, 0xdc, 0xe9, 0x19, 0xc9, 0x3d,
	0xeb, 0x3d, 0xa0, 0xb2, 0xa2, 0x67, 0x13, 0xd1, 0x33, 0x52, 0xf0, 0xac, 0xbf, 0x55, 0x65, 0x45,
	0xcf, 0x88, 0xe2, 0x59, 0x00, 0xdc, 0x74, 0xf3, 0xf2, 0xab, 0x8c, 0xb2, 0x0d, 0x18, 0xdb, 0xeb,
	0xea, 0xbb, 0x37, 0xc1, 0xc8, 0xe8, 0xf8, 0x5e, 0xca, 0xc3, 0x94, 0x2f, 0x25, 0x12, 0xaa, 0x73,
	0x2b, 0xf3, 0x71, 0x48, 0xa5, 0xbc, 0xfe, 0x5c, 0x09, 0xab, 0xf5, 0x71, 0xeb, 0x76, 0x1f, 0x52,
	0x9f, 0xe0, 0x9d, 0x58, 0x5f, 0x62, 0x5e, 0x5a, 0x9f, 0xec, 0xde, 0xde, 0x76, 0xf5, 0x15, 0xec,
	0xeb, 0xcf, 0x95, 0xb0, 0xfb, 0x3b, 0xd8, 0x4d, 0x3b, 0x53, 0x34, 0x70, 0x9f, 0x11, 0xbe, 0xa9,
	0xde, 0x9b, 0x73, 0xc5, 0x41, 0xde, 0xf7, 0x42, 0x9c, 0x51, 0x6a, 0x3c, 0x7c, 0x54, 0x9d, 0x72,
	0xae, 0x35, 0x71, 0x40, 0x0a, 0x2e, 0xaa, 0x55, 0x72, 0x1b, 0x1f, 0x3f, 0xa8, 0x4a, 0xc1, 0x47,
	0xa9, 0xca, 0xc4, 0xc8, 0xac, 0x4a, 0xd9, 0x49, 0x6f, 0xcb, 0x2a, 0x0b, 0x56, 0x0e, 0x48, 0xc1,
	0x4b, 0x1f, 0xf0, 0x5d, 0xf0, 0x91, 0xbd, 0x02, 0x29, 0xdd, 0x13, 0x46, 0xf7, 0x6d, 0xe5, 0x0a,
	0xcf, 0xc2, 0x70, 0x9d, 0x51, 0xf1, 0xdf, 0x26, 0x3c, 0x46, 0x69, 0x18, 0xbe, 0x50, 0xd5, 0x41,
	0x65, 0x1a, 0x0a, 0xa6, 0x54, 0xe4, 0xcc, 0xc4, 0x98, 0xb8, 0x33, 0x73, 0xa2, 0xa7, 0xdb, 0xee,
	0x4c, 0x75, 0x8d, 0xc9, 0x51, 0xe1, 0x09, 0x94, 0x3c, 0x7d, 0x29, 0xd7, 0xb3, 0x2d, 0x9f, 0x40,
	0x67, 0x14, 0x41, 0x7d, 0x02, 0xa5, 0xc1, 0x83, 0x33, 0xb0, 0xa7, 0x7b, 0xd3, 0xba, 0x7d, 0x60,
	0x7e, 0xf2, 0x6f, 0xd9, 0x8f, 0xae, 0x0e, 0xa6, 0xff, 0x74, 0xf7, 0xf8, 0x23, 0x9b, 0xfd, 0xc8,
	0x32, 0x70, 0xf2, 0x9f, 0x6f, 0x6a, 0x5f, 0x1b, 0x07, 0x6f, 0xc0, 0xae, 0xe6, 0xad, 0x5a, 0x06,
	0x51, 0xd3, 0x42, 0x48, 0x8f, 0xd0, 0x32, 0x88, 0x86, 0x02, 0xa1, 0x79, 0x5d, 0x8a, 0x10, 0x0d,
	0x0d, 0x44, 0xe7, 0x2e, 0x15, 0xf9, 0x38, 0x95, 0xa9, 0x30, 0x8b, 0x2a, 0xd4, 0xf1, 0x10, 0x21,
	0xcc, 0x32, 0x15, 0x99, 0x25, 0xf2, 0x3b, 0xaf, 0x4c, 0x86, 0xa3, 0x60, 0xe8, 0x9e, 0x6f, 0x22,
	0x86, 0x53, 0x49, 0xc7, 0xe6, 0xc7, 0x51, 0xd7, 0xe8, 0xb8, 0xef, 0x3c, 0xea, 0x1b, 0xeb, 0x98,
	0x54, 0x3a, 0x8f, 0x81, 0x8a, 0x51, 0x72, 0x1e, 0x83, 0x4a, 0x3a, 0x36, 0x3f, 0x0f, 0x57, 0xa3,
	0xe3, 0xbe, 0xf3, 0x70, 0xcb, 0x74, 0x7c, 0x0f, 0xf6, 0xb5, 0xcf, 0x93, 0x32, 0x21, 0x2d, 0x05,
	0x44, 0xfb, 0xe6, 0x10, 0x41, 0x5a, 0xd5, 0x94, 0x6c, 0x7e, 0x24, 0x4d, 0x9d, 0x92, 0xfb, 0xce,
	0xa4, 0x59, 0xa6, 0xe4, 0x2d, 0x78, 0xa4, 0xbf, 0xf1, 0xcb, 0xa4, 0xf4, 0x54, 0x94, 0x79, 0xd9,
	0xa9, 0xf4, 0x2a, 0x6a, 0xd9, 0xfc, 0x58, 0xfa, 0x5a, 0x2d, 0xf7, 0x9d, 0x4b, 0xbf, 0x4c, 0xcb,
	0x6b, 0xe0, 0x16, 0x6f, 0xd0, 0x32, 0x1d, 0x6d, 0x05, 0xa1, 0x78, 0x39, 0x8a, 0x08, 0xed, 0xcd,
	0xe7, 0xe6, 0x4e, 0x8c, 0xce, 0xc6, 0x9b, 0x59, 0xba, 0xcd, 0xca, 0x20, 0x6c, 0x01, 0xe2, 0xec,
	0xd5, 0xbf, 0x71, 0xbd, 0x6d, 0xf4, 0x8d, 0x5f, 0xc7, 0x8b, 0x55, 0xb4, 0x8c, 0x67, 0xc3, 0xcb,
	0xf0, 0xf3, 0xe9, 0xfb, 0xa5, 0xff, 0x9e, 0x5d, 0xa6, 0xef, 0x82, 0xab, 0x98, 0x5e, 0x8d, 0x3e,
	0x39, 0x65, 0x7f, 0xe9, 0xb8, 0x3c, 0x59, 0xf8, 0xc1, 0xc9, 0x22, 0x3c, 0xa1, 0x97, 0xec, 0x29,
	0xbd, 0x64, 0x67, 0x4d, 0xf6, 0xe1, 0xe5, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe7, 0x32, 0x41,
	0x74, 0x3b, 0x19, 0x00, 0x00,
}
