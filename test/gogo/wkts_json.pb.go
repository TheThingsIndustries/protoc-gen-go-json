// Code generated by protoc-gen-go-json. DO NOT EDIT.
// versions:
// - protoc-gen-go-json v0.0.0-dev
// - protoc             v3.9.1
// source: wkts.proto

package test

import (
	gogo "github.com/TheThingsIndustries/protoc-gen-go-json/gogo"
	jsonplugin "github.com/TheThingsIndustries/protoc-gen-go-json/jsonplugin"
	types "github.com/gogo/protobuf/types"
)

// MarshalProtoJSON marshals the MessageWithMarshaler message to JSON.
func (x *MessageWithMarshaler) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Message != "" || s.HasField("message") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("message")
		s.WriteString(x.Message)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the MessageWithMarshaler to JSON.
func (x *MessageWithMarshaler) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageWithMarshaler message from JSON.
func (x *MessageWithMarshaler) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "message":
			s.AddField("message")
			x.Message = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the MessageWithMarshaler from JSON.
func (x *MessageWithMarshaler) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the MessageWithWKTs message to JSON.
func (x *MessageWithWKTs) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.DoubleValue != nil || s.HasField("double_value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("double_value")
		if x.DoubleValue == nil {
			s.WriteNil()
		} else {
			s.WriteFloat64(x.DoubleValue.Value)
		}
	}
	if len(x.DoubleValues) > 0 || s.HasField("double_values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("double_values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.DoubleValues {
			s.WriteMoreIf(&wroteElement)
			if element == nil {
				s.WriteNil()
			} else {
				s.WriteFloat64(element.Value)
			}
		}
		s.WriteArrayEnd()
	}
	if x.FloatValue != nil || s.HasField("float_value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("float_value")
		if x.FloatValue == nil {
			s.WriteNil()
		} else {
			s.WriteFloat32(x.FloatValue.Value)
		}
	}
	if len(x.FloatValues) > 0 || s.HasField("float_values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("float_values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.FloatValues {
			s.WriteMoreIf(&wroteElement)
			if element == nil {
				s.WriteNil()
			} else {
				s.WriteFloat32(element.Value)
			}
		}
		s.WriteArrayEnd()
	}
	if x.Int32Value != nil || s.HasField("int32_value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("int32_value")
		if x.Int32Value == nil {
			s.WriteNil()
		} else {
			s.WriteInt32(x.Int32Value.Value)
		}
	}
	if len(x.Int32Values) > 0 || s.HasField("int32_values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("int32_values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Int32Values {
			s.WriteMoreIf(&wroteElement)
			if element == nil {
				s.WriteNil()
			} else {
				s.WriteInt32(element.Value)
			}
		}
		s.WriteArrayEnd()
	}
	if x.Int64Value != nil || s.HasField("int64_value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("int64_value")
		if x.Int64Value == nil {
			s.WriteNil()
		} else {
			s.WriteInt64(x.Int64Value.Value)
		}
	}
	if len(x.Int64Values) > 0 || s.HasField("int64_values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("int64_values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Int64Values {
			s.WriteMoreIf(&wroteElement)
			if element == nil {
				s.WriteNil()
			} else {
				s.WriteInt64(element.Value)
			}
		}
		s.WriteArrayEnd()
	}
	if x.Uint32Value != nil || s.HasField("uint32_value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uint32_value")
		if x.Uint32Value == nil {
			s.WriteNil()
		} else {
			s.WriteUint32(x.Uint32Value.Value)
		}
	}
	if len(x.Uint32Values) > 0 || s.HasField("uint32_values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uint32_values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Uint32Values {
			s.WriteMoreIf(&wroteElement)
			if element == nil {
				s.WriteNil()
			} else {
				s.WriteUint32(element.Value)
			}
		}
		s.WriteArrayEnd()
	}
	if x.Uint64Value != nil || s.HasField("uint64_value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uint64_value")
		if x.Uint64Value == nil {
			s.WriteNil()
		} else {
			s.WriteUint64(x.Uint64Value.Value)
		}
	}
	if len(x.Uint64Values) > 0 || s.HasField("uint64_values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("uint64_values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Uint64Values {
			s.WriteMoreIf(&wroteElement)
			if element == nil {
				s.WriteNil()
			} else {
				s.WriteUint64(element.Value)
			}
		}
		s.WriteArrayEnd()
	}
	if x.BoolValue != nil || s.HasField("bool_value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("bool_value")
		if x.BoolValue == nil {
			s.WriteNil()
		} else {
			s.WriteBool(x.BoolValue.Value)
		}
	}
	if len(x.BoolValues) > 0 || s.HasField("bool_values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("bool_values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.BoolValues {
			s.WriteMoreIf(&wroteElement)
			if element == nil {
				s.WriteNil()
			} else {
				s.WriteBool(element.Value)
			}
		}
		s.WriteArrayEnd()
	}
	if x.StringValue != nil || s.HasField("string_value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_value")
		if x.StringValue == nil {
			s.WriteNil()
		} else {
			s.WriteString(x.StringValue.Value)
		}
	}
	if len(x.StringValues) > 0 || s.HasField("string_values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.StringValues {
			s.WriteMoreIf(&wroteElement)
			if element == nil {
				s.WriteNil()
			} else {
				s.WriteString(element.Value)
			}
		}
		s.WriteArrayEnd()
	}
	if x.BytesValue != nil || s.HasField("bytes_value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("bytes_value")
		if x.BytesValue == nil {
			s.WriteNil()
		} else {
			s.WriteBytes(x.BytesValue.Value)
		}
	}
	if len(x.BytesValues) > 0 || s.HasField("bytes_values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("bytes_values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.BytesValues {
			s.WriteMoreIf(&wroteElement)
			if element == nil {
				s.WriteNil()
			} else {
				s.WriteBytes(element.Value)
			}
		}
		s.WriteArrayEnd()
	}
	if x.EmptyValue != nil || s.HasField("empty_value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("empty_value")
		if x.EmptyValue == nil {
			s.WriteNil()
		} else {
			gogo.MarshalEmpty(s, x.EmptyValue)
		}
	}
	if len(x.EmptyValues) > 0 || s.HasField("empty_values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("empty_values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.EmptyValues {
			s.WriteMoreIf(&wroteElement)
			if element == nil {
				s.WriteNil()
			} else {
				gogo.MarshalEmpty(s, element)
			}
		}
		s.WriteArrayEnd()
	}
	if x.TimestampValue != nil || s.HasField("timestamp_value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("timestamp_value")
		if x.TimestampValue == nil {
			s.WriteNil()
		} else {
			gogo.MarshalTimestamp(s, x.TimestampValue)
		}
	}
	if len(x.TimestampValues) > 0 || s.HasField("timestamp_values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("timestamp_values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.TimestampValues {
			s.WriteMoreIf(&wroteElement)
			if element == nil {
				s.WriteNil()
			} else {
				gogo.MarshalTimestamp(s, element)
			}
		}
		s.WriteArrayEnd()
	}
	if x.DurationValue != nil || s.HasField("duration_value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("duration_value")
		if x.DurationValue == nil {
			s.WriteNil()
		} else {
			gogo.MarshalDuration(s, x.DurationValue)
		}
	}
	if len(x.DurationValues) > 0 || s.HasField("duration_values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("duration_values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.DurationValues {
			s.WriteMoreIf(&wroteElement)
			if element == nil {
				s.WriteNil()
			} else {
				gogo.MarshalDuration(s, element)
			}
		}
		s.WriteArrayEnd()
	}
	if x.FieldMaskValue != nil || s.HasField("field_mask_value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask_value")
		if x.FieldMaskValue == nil {
			s.WriteNil()
		} else {
			gogo.MarshalFieldMask(s, x.FieldMaskValue)
		}
	}
	if len(x.FieldMaskValues) > 0 || s.HasField("field_mask_values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("field_mask_values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.FieldMaskValues {
			s.WriteMoreIf(&wroteElement)
			if element == nil {
				s.WriteNil()
			} else {
				gogo.MarshalFieldMask(s, element)
			}
		}
		s.WriteArrayEnd()
	}
	if x.ValueValue != nil || s.HasField("value_value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("value_value")
		if x.ValueValue == nil {
			s.WriteNil()
		} else {
			gogo.MarshalValue(s, x.ValueValue)
		}
	}
	if len(x.ValueValues) > 0 || s.HasField("value_values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("value_values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.ValueValues {
			s.WriteMoreIf(&wroteElement)
			if element == nil {
				s.WriteNil()
			} else {
				gogo.MarshalValue(s, element)
			}
		}
		s.WriteArrayEnd()
	}
	if x.ListValueValue != nil || s.HasField("list_value_value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("list_value_value")
		if x.ListValueValue == nil {
			s.WriteNil()
		} else {
			gogo.MarshalListValue(s, x.ListValueValue)
		}
	}
	if len(x.ListValueValues) > 0 || s.HasField("list_value_values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("list_value_values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.ListValueValues {
			s.WriteMoreIf(&wroteElement)
			if element == nil {
				s.WriteNil()
			} else {
				gogo.MarshalListValue(s, element)
			}
		}
		s.WriteArrayEnd()
	}
	if x.StructValue != nil || s.HasField("struct_value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("struct_value")
		if x.StructValue == nil {
			s.WriteNil()
		} else {
			gogo.MarshalStruct(s, x.StructValue)
		}
	}
	if len(x.StructValues) > 0 || s.HasField("struct_values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("struct_values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.StructValues {
			s.WriteMoreIf(&wroteElement)
			if element == nil {
				s.WriteNil()
			} else {
				gogo.MarshalStruct(s, element)
			}
		}
		s.WriteArrayEnd()
	}
	if x.AnyValue != nil || s.HasField("any_value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("any_value")
		if x.AnyValue == nil {
			s.WriteNil()
		} else {
			gogo.MarshalAny(s, x.AnyValue, false)
		}
	}
	if len(x.AnyValues) > 0 || s.HasField("any_values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("any_values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.AnyValues {
			s.WriteMoreIf(&wroteElement)
			if element == nil {
				s.WriteNil()
			} else {
				gogo.MarshalAny(s, element, false)
			}
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the MessageWithWKTs to JSON.
func (x *MessageWithWKTs) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageWithWKTs message from JSON.
func (x *MessageWithWKTs) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "double_value", "doubleValue":
			s.AddField("double_value")
			if s.ReadNil() {
				x.DoubleValue = nil
				return
			}
			v := s.ReadWrappedFloat64()
			if s.Err() != nil {
				return
			}
			x.DoubleValue = &types.DoubleValue{Value: v}
		case "double_values", "doubleValues":
			s.AddField("double_values")
			if s.ReadNil() {
				x.DoubleValues = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.DoubleValues = append(x.DoubleValues, nil)
					return
				}
				v := s.ReadWrappedFloat64()
				if s.Err() != nil {
					return
				}
				x.DoubleValues = append(x.DoubleValues, &types.DoubleValue{Value: v})
			})
		case "float_value", "floatValue":
			s.AddField("float_value")
			if s.ReadNil() {
				x.FloatValue = nil
				return
			}
			v := s.ReadWrappedFloat32()
			if s.Err() != nil {
				return
			}
			x.FloatValue = &types.FloatValue{Value: v}
		case "float_values", "floatValues":
			s.AddField("float_values")
			if s.ReadNil() {
				x.FloatValues = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.FloatValues = append(x.FloatValues, nil)
					return
				}
				v := s.ReadWrappedFloat32()
				if s.Err() != nil {
					return
				}
				x.FloatValues = append(x.FloatValues, &types.FloatValue{Value: v})
			})
		case "int32_value", "int32Value":
			s.AddField("int32_value")
			if s.ReadNil() {
				x.Int32Value = nil
				return
			}
			v := s.ReadWrappedInt32()
			if s.Err() != nil {
				return
			}
			x.Int32Value = &types.Int32Value{Value: v}
		case "int32_values", "int32Values":
			s.AddField("int32_values")
			if s.ReadNil() {
				x.Int32Values = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Int32Values = append(x.Int32Values, nil)
					return
				}
				v := s.ReadWrappedInt32()
				if s.Err() != nil {
					return
				}
				x.Int32Values = append(x.Int32Values, &types.Int32Value{Value: v})
			})
		case "int64_value", "int64Value":
			s.AddField("int64_value")
			if s.ReadNil() {
				x.Int64Value = nil
				return
			}
			v := s.ReadWrappedInt64()
			if s.Err() != nil {
				return
			}
			x.Int64Value = &types.Int64Value{Value: v}
		case "int64_values", "int64Values":
			s.AddField("int64_values")
			if s.ReadNil() {
				x.Int64Values = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Int64Values = append(x.Int64Values, nil)
					return
				}
				v := s.ReadWrappedInt64()
				if s.Err() != nil {
					return
				}
				x.Int64Values = append(x.Int64Values, &types.Int64Value{Value: v})
			})
		case "uint32_value", "uint32Value":
			s.AddField("uint32_value")
			if s.ReadNil() {
				x.Uint32Value = nil
				return
			}
			v := s.ReadWrappedUint32()
			if s.Err() != nil {
				return
			}
			x.Uint32Value = &types.UInt32Value{Value: v}
		case "uint32_values", "uint32Values":
			s.AddField("uint32_values")
			if s.ReadNil() {
				x.Uint32Values = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Uint32Values = append(x.Uint32Values, nil)
					return
				}
				v := s.ReadWrappedUint32()
				if s.Err() != nil {
					return
				}
				x.Uint32Values = append(x.Uint32Values, &types.UInt32Value{Value: v})
			})
		case "uint64_value", "uint64Value":
			s.AddField("uint64_value")
			if s.ReadNil() {
				x.Uint64Value = nil
				return
			}
			v := s.ReadWrappedUint64()
			if s.Err() != nil {
				return
			}
			x.Uint64Value = &types.UInt64Value{Value: v}
		case "uint64_values", "uint64Values":
			s.AddField("uint64_values")
			if s.ReadNil() {
				x.Uint64Values = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Uint64Values = append(x.Uint64Values, nil)
					return
				}
				v := s.ReadWrappedUint64()
				if s.Err() != nil {
					return
				}
				x.Uint64Values = append(x.Uint64Values, &types.UInt64Value{Value: v})
			})
		case "bool_value", "boolValue":
			s.AddField("bool_value")
			if s.ReadNil() {
				x.BoolValue = nil
				return
			}
			v := s.ReadWrappedBool()
			if s.Err() != nil {
				return
			}
			x.BoolValue = &types.BoolValue{Value: v}
		case "bool_values", "boolValues":
			s.AddField("bool_values")
			if s.ReadNil() {
				x.BoolValues = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.BoolValues = append(x.BoolValues, nil)
					return
				}
				v := s.ReadWrappedBool()
				if s.Err() != nil {
					return
				}
				x.BoolValues = append(x.BoolValues, &types.BoolValue{Value: v})
			})
		case "string_value", "stringValue":
			s.AddField("string_value")
			if s.ReadNil() {
				x.StringValue = nil
				return
			}
			v := s.ReadWrappedString()
			if s.Err() != nil {
				return
			}
			x.StringValue = &types.StringValue{Value: v}
		case "string_values", "stringValues":
			s.AddField("string_values")
			if s.ReadNil() {
				x.StringValues = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.StringValues = append(x.StringValues, nil)
					return
				}
				v := s.ReadWrappedString()
				if s.Err() != nil {
					return
				}
				x.StringValues = append(x.StringValues, &types.StringValue{Value: v})
			})
		case "bytes_value", "bytesValue":
			s.AddField("bytes_value")
			if s.ReadNil() {
				x.BytesValue = nil
				return
			}
			v := s.ReadWrappedBytes()
			if s.Err() != nil {
				return
			}
			x.BytesValue = &types.BytesValue{Value: v}
		case "bytes_values", "bytesValues":
			s.AddField("bytes_values")
			if s.ReadNil() {
				x.BytesValues = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.BytesValues = append(x.BytesValues, nil)
					return
				}
				v := s.ReadWrappedBytes()
				if s.Err() != nil {
					return
				}
				x.BytesValues = append(x.BytesValues, &types.BytesValue{Value: v})
			})
		case "empty_value", "emptyValue":
			s.AddField("empty_value")
			if s.ReadNil() {
				x.EmptyValue = nil
				return
			}
			v := gogo.UnmarshalEmpty(s)
			if s.Err() != nil {
				return
			}
			x.EmptyValue = v
		case "empty_values", "emptyValues":
			s.AddField("empty_values")
			if s.ReadNil() {
				x.EmptyValues = nil
				return
			}
			s.ReadArray(func() {
				v := gogo.UnmarshalEmpty(s)
				if s.Err() != nil {
					return
				}
				x.EmptyValues = append(x.EmptyValues, v)
			})
		case "timestamp_value", "timestampValue":
			s.AddField("timestamp_value")
			if s.ReadNil() {
				x.TimestampValue = nil
				return
			}
			v := gogo.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			x.TimestampValue = v
		case "timestamp_values", "timestampValues":
			s.AddField("timestamp_values")
			if s.ReadNil() {
				x.TimestampValues = nil
				return
			}
			s.ReadArray(func() {
				v := gogo.UnmarshalTimestamp(s)
				if s.Err() != nil {
					return
				}
				x.TimestampValues = append(x.TimestampValues, v)
			})
		case "duration_value", "durationValue":
			s.AddField("duration_value")
			if s.ReadNil() {
				x.DurationValue = nil
				return
			}
			v := gogo.UnmarshalDuration(s)
			if s.Err() != nil {
				return
			}
			x.DurationValue = v
		case "duration_values", "durationValues":
			s.AddField("duration_values")
			if s.ReadNil() {
				x.DurationValues = nil
				return
			}
			s.ReadArray(func() {
				v := gogo.UnmarshalDuration(s)
				if s.Err() != nil {
					return
				}
				x.DurationValues = append(x.DurationValues, v)
			})
		case "field_mask_value", "fieldMaskValue":
			s.AddField("field_mask_value")
			if s.ReadNil() {
				x.FieldMaskValue = nil
				return
			}
			v := gogo.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			x.FieldMaskValue = v
		case "field_mask_values", "fieldMaskValues":
			s.AddField("field_mask_values")
			if s.ReadNil() {
				x.FieldMaskValues = nil
				return
			}
			s.ReadArray(func() {
				v := gogo.UnmarshalFieldMask(s)
				if s.Err() != nil {
					return
				}
				x.FieldMaskValues = append(x.FieldMaskValues, v)
			})
		case "value_value", "valueValue":
			s.AddField("value_value")
			if s.ReadNil() {
				x.ValueValue = &types.Value{Kind: &types.Value_NullValue{}}
				return
			}
			v := gogo.UnmarshalValue(s)
			if s.Err() != nil {
				return
			}
			x.ValueValue = v
		case "value_values", "valueValues":
			s.AddField("value_values")
			if s.ReadNil() {
				x.ValueValues = nil
				return
			}
			s.ReadArray(func() {
				v := gogo.UnmarshalValue(s)
				if s.Err() != nil {
					return
				}
				x.ValueValues = append(x.ValueValues, v)
			})
		case "list_value_value", "listValueValue":
			s.AddField("list_value_value")
			if s.ReadNil() {
				x.ListValueValue = nil
				return
			}
			v := gogo.UnmarshalListValue(s)
			if s.Err() != nil {
				return
			}
			x.ListValueValue = v
		case "list_value_values", "listValueValues":
			s.AddField("list_value_values")
			if s.ReadNil() {
				x.ListValueValues = nil
				return
			}
			s.ReadArray(func() {
				v := gogo.UnmarshalListValue(s)
				if s.Err() != nil {
					return
				}
				x.ListValueValues = append(x.ListValueValues, v)
			})
		case "struct_value", "structValue":
			s.AddField("struct_value")
			if s.ReadNil() {
				x.StructValue = nil
				return
			}
			v := gogo.UnmarshalStruct(s)
			if s.Err() != nil {
				return
			}
			x.StructValue = v
		case "struct_values", "structValues":
			s.AddField("struct_values")
			if s.ReadNil() {
				x.StructValues = nil
				return
			}
			s.ReadArray(func() {
				v := gogo.UnmarshalStruct(s)
				if s.Err() != nil {
					return
				}
				x.StructValues = append(x.StructValues, v)
			})
		case "any_value", "anyValue":
			s.AddField("any_value")
			if s.ReadNil() {
				x.AnyValue = nil
				return
			}
			v := gogo.UnmarshalAny(s)
			if s.Err() != nil {
				return
			}
			x.AnyValue = v
		case "any_values", "anyValues":
			s.AddField("any_values")
			if s.ReadNil() {
				x.AnyValues = nil
				return
			}
			s.ReadArray(func() {
				v := gogo.UnmarshalAny(s)
				if s.Err() != nil {
					return
				}
				x.AnyValues = append(x.AnyValues, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the MessageWithWKTs from JSON.
func (x *MessageWithWKTs) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the MessageWithOneofWKTs message to JSON.
func (x *MessageWithOneofWKTs) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Value != nil {
		switch ov := x.Value.(type) {
		case *MessageWithOneofWKTs_DoubleValue:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("double_value")
			if ov.DoubleValue == nil {
				s.WriteNil()
			} else {
				s.WriteFloat64(ov.DoubleValue.Value)
			}
		case *MessageWithOneofWKTs_FloatValue:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("float_value")
			if ov.FloatValue == nil {
				s.WriteNil()
			} else {
				s.WriteFloat32(ov.FloatValue.Value)
			}
		case *MessageWithOneofWKTs_Int32Value:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("int32_value")
			if ov.Int32Value == nil {
				s.WriteNil()
			} else {
				s.WriteInt32(ov.Int32Value.Value)
			}
		case *MessageWithOneofWKTs_Int64Value:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("int64_value")
			if ov.Int64Value == nil {
				s.WriteNil()
			} else {
				s.WriteInt64(ov.Int64Value.Value)
			}
		case *MessageWithOneofWKTs_Uint32Value:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("uint32_value")
			if ov.Uint32Value == nil {
				s.WriteNil()
			} else {
				s.WriteUint32(ov.Uint32Value.Value)
			}
		case *MessageWithOneofWKTs_Uint64Value:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("uint64_value")
			if ov.Uint64Value == nil {
				s.WriteNil()
			} else {
				s.WriteUint64(ov.Uint64Value.Value)
			}
		case *MessageWithOneofWKTs_BoolValue:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("bool_value")
			if ov.BoolValue == nil {
				s.WriteNil()
			} else {
				s.WriteBool(ov.BoolValue.Value)
			}
		case *MessageWithOneofWKTs_StringValue:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("string_value")
			if ov.StringValue == nil {
				s.WriteNil()
			} else {
				s.WriteString(ov.StringValue.Value)
			}
		case *MessageWithOneofWKTs_BytesValue:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("bytes_value")
			if ov.BytesValue == nil {
				s.WriteNil()
			} else {
				s.WriteBytes(ov.BytesValue.Value)
			}
		case *MessageWithOneofWKTs_EmptyValue:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("empty_value")
			if ov.EmptyValue == nil {
				s.WriteNil()
			} else {
				gogo.MarshalEmpty(s, ov.EmptyValue)
			}
		case *MessageWithOneofWKTs_TimestampValue:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("timestamp_value")
			if ov.TimestampValue == nil {
				s.WriteNil()
			} else {
				gogo.MarshalTimestamp(s, ov.TimestampValue)
			}
		case *MessageWithOneofWKTs_DurationValue:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("duration_value")
			if ov.DurationValue == nil {
				s.WriteNil()
			} else {
				gogo.MarshalDuration(s, ov.DurationValue)
			}
		case *MessageWithOneofWKTs_FieldMaskValue:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("field_mask_value")
			if ov.FieldMaskValue == nil {
				s.WriteNil()
			} else {
				gogo.MarshalFieldMask(s, ov.FieldMaskValue)
			}
		case *MessageWithOneofWKTs_ValueValue:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("value_value")
			if ov.ValueValue == nil {
				s.WriteNil()
			} else {
				gogo.MarshalValue(s, ov.ValueValue)
			}
		case *MessageWithOneofWKTs_ListValueValue:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("list_value_value")
			if ov.ListValueValue == nil {
				s.WriteNil()
			} else {
				gogo.MarshalListValue(s, ov.ListValueValue)
			}
		case *MessageWithOneofWKTs_StructValue:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("struct_value")
			if ov.StructValue == nil {
				s.WriteNil()
			} else {
				gogo.MarshalStruct(s, ov.StructValue)
			}
		case *MessageWithOneofWKTs_AnyValue:
			s.WriteMoreIf(&wroteField)
			s.WriteObjectField("any_value")
			if ov.AnyValue == nil {
				s.WriteNil()
			} else {
				gogo.MarshalAny(s, ov.AnyValue, false)
			}
		}
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the MessageWithOneofWKTs to JSON.
func (x *MessageWithOneofWKTs) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageWithOneofWKTs message from JSON.
func (x *MessageWithOneofWKTs) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "double_value", "doubleValue":
			s.AddField("double_value")
			ov := &MessageWithOneofWKTs_DoubleValue{}
			x.Value = ov
			if s.ReadNil() {
				ov.DoubleValue = nil
				return
			}
			v := s.ReadWrappedFloat64()
			if s.Err() != nil {
				return
			}
			ov.DoubleValue = &types.DoubleValue{Value: v}
		case "float_value", "floatValue":
			s.AddField("float_value")
			ov := &MessageWithOneofWKTs_FloatValue{}
			x.Value = ov
			if s.ReadNil() {
				ov.FloatValue = nil
				return
			}
			v := s.ReadWrappedFloat32()
			if s.Err() != nil {
				return
			}
			ov.FloatValue = &types.FloatValue{Value: v}
		case "int32_value", "int32Value":
			s.AddField("int32_value")
			ov := &MessageWithOneofWKTs_Int32Value{}
			x.Value = ov
			if s.ReadNil() {
				ov.Int32Value = nil
				return
			}
			v := s.ReadWrappedInt32()
			if s.Err() != nil {
				return
			}
			ov.Int32Value = &types.Int32Value{Value: v}
		case "int64_value", "int64Value":
			s.AddField("int64_value")
			ov := &MessageWithOneofWKTs_Int64Value{}
			x.Value = ov
			if s.ReadNil() {
				ov.Int64Value = nil
				return
			}
			v := s.ReadWrappedInt64()
			if s.Err() != nil {
				return
			}
			ov.Int64Value = &types.Int64Value{Value: v}
		case "uint32_value", "uint32Value":
			s.AddField("uint32_value")
			ov := &MessageWithOneofWKTs_Uint32Value{}
			x.Value = ov
			if s.ReadNil() {
				ov.Uint32Value = nil
				return
			}
			v := s.ReadWrappedUint32()
			if s.Err() != nil {
				return
			}
			ov.Uint32Value = &types.UInt32Value{Value: v}
		case "uint64_value", "uint64Value":
			s.AddField("uint64_value")
			ov := &MessageWithOneofWKTs_Uint64Value{}
			x.Value = ov
			if s.ReadNil() {
				ov.Uint64Value = nil
				return
			}
			v := s.ReadWrappedUint64()
			if s.Err() != nil {
				return
			}
			ov.Uint64Value = &types.UInt64Value{Value: v}
		case "bool_value", "boolValue":
			s.AddField("bool_value")
			ov := &MessageWithOneofWKTs_BoolValue{}
			x.Value = ov
			if s.ReadNil() {
				ov.BoolValue = nil
				return
			}
			v := s.ReadWrappedBool()
			if s.Err() != nil {
				return
			}
			ov.BoolValue = &types.BoolValue{Value: v}
		case "string_value", "stringValue":
			s.AddField("string_value")
			ov := &MessageWithOneofWKTs_StringValue{}
			x.Value = ov
			if s.ReadNil() {
				ov.StringValue = nil
				return
			}
			v := s.ReadWrappedString()
			if s.Err() != nil {
				return
			}
			ov.StringValue = &types.StringValue{Value: v}
		case "bytes_value", "bytesValue":
			s.AddField("bytes_value")
			ov := &MessageWithOneofWKTs_BytesValue{}
			x.Value = ov
			if s.ReadNil() {
				ov.BytesValue = nil
				return
			}
			v := s.ReadWrappedBytes()
			if s.Err() != nil {
				return
			}
			ov.BytesValue = &types.BytesValue{Value: v}
		case "empty_value", "emptyValue":
			s.AddField("empty_value")
			ov := &MessageWithOneofWKTs_EmptyValue{}
			x.Value = ov
			if s.ReadNil() {
				ov.EmptyValue = nil
				return
			}
			v := gogo.UnmarshalEmpty(s)
			if s.Err() != nil {
				return
			}
			ov.EmptyValue = v
		case "timestamp_value", "timestampValue":
			s.AddField("timestamp_value")
			ov := &MessageWithOneofWKTs_TimestampValue{}
			x.Value = ov
			if s.ReadNil() {
				ov.TimestampValue = nil
				return
			}
			v := gogo.UnmarshalTimestamp(s)
			if s.Err() != nil {
				return
			}
			ov.TimestampValue = v
		case "duration_value", "durationValue":
			s.AddField("duration_value")
			ov := &MessageWithOneofWKTs_DurationValue{}
			x.Value = ov
			if s.ReadNil() {
				ov.DurationValue = nil
				return
			}
			v := gogo.UnmarshalDuration(s)
			if s.Err() != nil {
				return
			}
			ov.DurationValue = v
		case "field_mask_value", "fieldMaskValue":
			s.AddField("field_mask_value")
			ov := &MessageWithOneofWKTs_FieldMaskValue{}
			x.Value = ov
			if s.ReadNil() {
				ov.FieldMaskValue = nil
				return
			}
			v := gogo.UnmarshalFieldMask(s)
			if s.Err() != nil {
				return
			}
			ov.FieldMaskValue = v
		case "value_value", "valueValue":
			s.AddField("value_value")
			ov := &MessageWithOneofWKTs_ValueValue{}
			x.Value = ov
			if s.ReadNil() {
				ov.ValueValue = &types.Value{Kind: &types.Value_NullValue{}}
				return
			}
			v := gogo.UnmarshalValue(s)
			if s.Err() != nil {
				return
			}
			ov.ValueValue = v
		case "list_value_value", "listValueValue":
			s.AddField("list_value_value")
			ov := &MessageWithOneofWKTs_ListValueValue{}
			x.Value = ov
			if s.ReadNil() {
				ov.ListValueValue = nil
				return
			}
			v := gogo.UnmarshalListValue(s)
			if s.Err() != nil {
				return
			}
			ov.ListValueValue = v
		case "struct_value", "structValue":
			s.AddField("struct_value")
			ov := &MessageWithOneofWKTs_StructValue{}
			x.Value = ov
			if s.ReadNil() {
				ov.StructValue = nil
				return
			}
			v := gogo.UnmarshalStruct(s)
			if s.Err() != nil {
				return
			}
			ov.StructValue = v
		case "any_value", "anyValue":
			s.AddField("any_value")
			ov := &MessageWithOneofWKTs_AnyValue{}
			x.Value = ov
			if s.ReadNil() {
				ov.AnyValue = nil
				return
			}
			v := gogo.UnmarshalAny(s)
			if s.Err() != nil {
				return
			}
			ov.AnyValue = v
		}
	})
}

// UnmarshalJSON unmarshals the MessageWithOneofWKTs from JSON.
func (x *MessageWithOneofWKTs) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the MessageWithWKTMaps message to JSON.
func (x *MessageWithWKTMaps) MarshalProtoJSON(s *jsonplugin.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.StringDoubleMap != nil || s.HasField("string_double_map") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_double_map")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.StringDoubleMap {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			if v == nil {
				s.WriteNil()
			} else {
				s.WriteFloat64(v.Value)
			}
		}
		s.WriteObjectEnd()
	}
	if x.StringFloatMap != nil || s.HasField("string_float_map") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_float_map")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.StringFloatMap {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			if v == nil {
				s.WriteNil()
			} else {
				s.WriteFloat32(v.Value)
			}
		}
		s.WriteObjectEnd()
	}
	if x.StringInt32Map != nil || s.HasField("string_int32_map") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_int32_map")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.StringInt32Map {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			if v == nil {
				s.WriteNil()
			} else {
				s.WriteInt32(v.Value)
			}
		}
		s.WriteObjectEnd()
	}
	if x.StringInt64Map != nil || s.HasField("string_int64_map") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_int64_map")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.StringInt64Map {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			if v == nil {
				s.WriteNil()
			} else {
				s.WriteInt64(v.Value)
			}
		}
		s.WriteObjectEnd()
	}
	if x.StringUint32Map != nil || s.HasField("string_uint32_map") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_uint32_map")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.StringUint32Map {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			if v == nil {
				s.WriteNil()
			} else {
				s.WriteUint32(v.Value)
			}
		}
		s.WriteObjectEnd()
	}
	if x.StringUint64Map != nil || s.HasField("string_uint64_map") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_uint64_map")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.StringUint64Map {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			if v == nil {
				s.WriteNil()
			} else {
				s.WriteUint64(v.Value)
			}
		}
		s.WriteObjectEnd()
	}
	if x.StringBoolMap != nil || s.HasField("string_bool_map") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_bool_map")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.StringBoolMap {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			if v == nil {
				s.WriteNil()
			} else {
				s.WriteBool(v.Value)
			}
		}
		s.WriteObjectEnd()
	}
	if x.StringStringMap != nil || s.HasField("string_string_map") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_string_map")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.StringStringMap {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			if v == nil {
				s.WriteNil()
			} else {
				s.WriteString(v.Value)
			}
		}
		s.WriteObjectEnd()
	}
	if x.StringBytesMap != nil || s.HasField("string_bytes_map") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_bytes_map")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.StringBytesMap {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			if v == nil {
				s.WriteNil()
			} else {
				s.WriteBytes(v.Value)
			}
		}
		s.WriteObjectEnd()
	}
	if x.StringEmptyMap != nil || s.HasField("string_empty_map") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_empty_map")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.StringEmptyMap {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			if v == nil {
				s.WriteNil()
			} else {
				gogo.MarshalEmpty(s, v)
			}
		}
		s.WriteObjectEnd()
	}
	if x.StringTimestampMap != nil || s.HasField("string_timestamp_map") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_timestamp_map")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.StringTimestampMap {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			if v == nil {
				s.WriteNil()
			} else {
				gogo.MarshalTimestamp(s, v)
			}
		}
		s.WriteObjectEnd()
	}
	if x.StringDurationMap != nil || s.HasField("string_duration_map") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_duration_map")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.StringDurationMap {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			if v == nil {
				s.WriteNil()
			} else {
				gogo.MarshalDuration(s, v)
			}
		}
		s.WriteObjectEnd()
	}
	if x.StringFieldMaskMap != nil || s.HasField("string_field_mask_map") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_field_mask_map")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.StringFieldMaskMap {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			if v == nil {
				s.WriteNil()
			} else {
				gogo.MarshalFieldMask(s, v)
			}
		}
		s.WriteObjectEnd()
	}
	if x.StringValueMap != nil || s.HasField("string_value_map") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_value_map")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.StringValueMap {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			if v == nil {
				s.WriteNil()
			} else {
				gogo.MarshalValue(s, v)
			}
		}
		s.WriteObjectEnd()
	}
	if x.StringListValueMap != nil || s.HasField("string_list_value_map") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_list_value_map")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.StringListValueMap {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			if v == nil {
				s.WriteNil()
			} else {
				gogo.MarshalListValue(s, v)
			}
		}
		s.WriteObjectEnd()
	}
	if x.StringStructMap != nil || s.HasField("string_struct_map") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_struct_map")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.StringStructMap {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			if v == nil {
				s.WriteNil()
			} else {
				gogo.MarshalStruct(s, v)
			}
		}
		s.WriteObjectEnd()
	}
	if x.StringAnyMap != nil || s.HasField("string_any_map") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("string_any_map")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.StringAnyMap {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			if v == nil {
				s.WriteNil()
			} else {
				gogo.MarshalAny(s, v, false)
			}
		}
		s.WriteObjectEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the MessageWithWKTMaps to JSON.
func (x *MessageWithWKTMaps) MarshalJSON() ([]byte, error) {
	return jsonplugin.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageWithWKTMaps message from JSON.
func (x *MessageWithWKTMaps) UnmarshalProtoJSON(s *jsonplugin.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.ReadAny() // ignore unknown field
		case "string_double_map", "stringDoubleMap":
			s.AddField("string_double_map")
			if s.ReadNil() {
				x.StringDoubleMap = nil
				return
			}
			x.StringDoubleMap = make(map[string]*types.DoubleValue)
			s.ReadStringMap(func(key string) {
				if s.ReadNil() {
					x.StringDoubleMap[key] = nil
				} else {
					v := s.ReadWrappedFloat64()
					if s.Err() != nil {
						return
					}
					x.StringDoubleMap[key] = &types.DoubleValue{Value: v}
				}
			})
		case "string_float_map", "stringFloatMap":
			s.AddField("string_float_map")
			if s.ReadNil() {
				x.StringFloatMap = nil
				return
			}
			x.StringFloatMap = make(map[string]*types.FloatValue)
			s.ReadStringMap(func(key string) {
				if s.ReadNil() {
					x.StringFloatMap[key] = nil
				} else {
					v := s.ReadWrappedFloat32()
					if s.Err() != nil {
						return
					}
					x.StringFloatMap[key] = &types.FloatValue{Value: v}
				}
			})
		case "string_int32_map", "stringInt32Map":
			s.AddField("string_int32_map")
			if s.ReadNil() {
				x.StringInt32Map = nil
				return
			}
			x.StringInt32Map = make(map[string]*types.Int32Value)
			s.ReadStringMap(func(key string) {
				if s.ReadNil() {
					x.StringInt32Map[key] = nil
				} else {
					v := s.ReadWrappedInt32()
					if s.Err() != nil {
						return
					}
					x.StringInt32Map[key] = &types.Int32Value{Value: v}
				}
			})
		case "string_int64_map", "stringInt64Map":
			s.AddField("string_int64_map")
			if s.ReadNil() {
				x.StringInt64Map = nil
				return
			}
			x.StringInt64Map = make(map[string]*types.Int64Value)
			s.ReadStringMap(func(key string) {
				if s.ReadNil() {
					x.StringInt64Map[key] = nil
				} else {
					v := s.ReadWrappedInt64()
					if s.Err() != nil {
						return
					}
					x.StringInt64Map[key] = &types.Int64Value{Value: v}
				}
			})
		case "string_uint32_map", "stringUint32Map":
			s.AddField("string_uint32_map")
			if s.ReadNil() {
				x.StringUint32Map = nil
				return
			}
			x.StringUint32Map = make(map[string]*types.UInt32Value)
			s.ReadStringMap(func(key string) {
				if s.ReadNil() {
					x.StringUint32Map[key] = nil
				} else {
					v := s.ReadWrappedUint32()
					if s.Err() != nil {
						return
					}
					x.StringUint32Map[key] = &types.UInt32Value{Value: v}
				}
			})
		case "string_uint64_map", "stringUint64Map":
			s.AddField("string_uint64_map")
			if s.ReadNil() {
				x.StringUint64Map = nil
				return
			}
			x.StringUint64Map = make(map[string]*types.UInt64Value)
			s.ReadStringMap(func(key string) {
				if s.ReadNil() {
					x.StringUint64Map[key] = nil
				} else {
					v := s.ReadWrappedUint64()
					if s.Err() != nil {
						return
					}
					x.StringUint64Map[key] = &types.UInt64Value{Value: v}
				}
			})
		case "string_bool_map", "stringBoolMap":
			s.AddField("string_bool_map")
			if s.ReadNil() {
				x.StringBoolMap = nil
				return
			}
			x.StringBoolMap = make(map[string]*types.BoolValue)
			s.ReadStringMap(func(key string) {
				if s.ReadNil() {
					x.StringBoolMap[key] = nil
				} else {
					v := s.ReadWrappedBool()
					if s.Err() != nil {
						return
					}
					x.StringBoolMap[key] = &types.BoolValue{Value: v}
				}
			})
		case "string_string_map", "stringStringMap":
			s.AddField("string_string_map")
			if s.ReadNil() {
				x.StringStringMap = nil
				return
			}
			x.StringStringMap = make(map[string]*types.StringValue)
			s.ReadStringMap(func(key string) {
				if s.ReadNil() {
					x.StringStringMap[key] = nil
				} else {
					v := s.ReadWrappedString()
					if s.Err() != nil {
						return
					}
					x.StringStringMap[key] = &types.StringValue{Value: v}
				}
			})
		case "string_bytes_map", "stringBytesMap":
			s.AddField("string_bytes_map")
			if s.ReadNil() {
				x.StringBytesMap = nil
				return
			}
			x.StringBytesMap = make(map[string]*types.BytesValue)
			s.ReadStringMap(func(key string) {
				if s.ReadNil() {
					x.StringBytesMap[key] = nil
				} else {
					v := s.ReadWrappedBytes()
					if s.Err() != nil {
						return
					}
					x.StringBytesMap[key] = &types.BytesValue{Value: v}
				}
			})
		case "string_empty_map", "stringEmptyMap":
			s.AddField("string_empty_map")
			if s.ReadNil() {
				x.StringEmptyMap = nil
				return
			}
			x.StringEmptyMap = make(map[string]*types.Empty)
			s.ReadStringMap(func(key string) {
				v := gogo.UnmarshalEmpty(s)
				if s.Err() != nil {
					return
				}
				x.StringEmptyMap[key] = v
			})
		case "string_timestamp_map", "stringTimestampMap":
			s.AddField("string_timestamp_map")
			if s.ReadNil() {
				x.StringTimestampMap = nil
				return
			}
			x.StringTimestampMap = make(map[string]*types.Timestamp)
			s.ReadStringMap(func(key string) {
				v := gogo.UnmarshalTimestamp(s)
				if s.Err() != nil {
					return
				}
				x.StringTimestampMap[key] = v
			})
		case "string_duration_map", "stringDurationMap":
			s.AddField("string_duration_map")
			if s.ReadNil() {
				x.StringDurationMap = nil
				return
			}
			x.StringDurationMap = make(map[string]*types.Duration)
			s.ReadStringMap(func(key string) {
				v := gogo.UnmarshalDuration(s)
				if s.Err() != nil {
					return
				}
				x.StringDurationMap[key] = v
			})
		case "string_field_mask_map", "stringFieldMaskMap":
			s.AddField("string_field_mask_map")
			if s.ReadNil() {
				x.StringFieldMaskMap = nil
				return
			}
			x.StringFieldMaskMap = make(map[string]*types.FieldMask)
			s.ReadStringMap(func(key string) {
				v := gogo.UnmarshalFieldMask(s)
				if s.Err() != nil {
					return
				}
				x.StringFieldMaskMap[key] = v
			})
		case "string_value_map", "stringValueMap":
			s.AddField("string_value_map")
			if s.ReadNil() {
				x.StringValueMap = nil
				return
			}
			x.StringValueMap = make(map[string]*types.Value)
			s.ReadStringMap(func(key string) {
				v := gogo.UnmarshalValue(s)
				if s.Err() != nil {
					return
				}
				x.StringValueMap[key] = v
			})
		case "string_list_value_map", "stringListValueMap":
			s.AddField("string_list_value_map")
			if s.ReadNil() {
				x.StringListValueMap = nil
				return
			}
			x.StringListValueMap = make(map[string]*types.ListValue)
			s.ReadStringMap(func(key string) {
				v := gogo.UnmarshalListValue(s)
				if s.Err() != nil {
					return
				}
				x.StringListValueMap[key] = v
			})
		case "string_struct_map", "stringStructMap":
			s.AddField("string_struct_map")
			if s.ReadNil() {
				x.StringStructMap = nil
				return
			}
			x.StringStructMap = make(map[string]*types.Struct)
			s.ReadStringMap(func(key string) {
				v := gogo.UnmarshalStruct(s)
				if s.Err() != nil {
					return
				}
				x.StringStructMap[key] = v
			})
		case "string_any_map", "stringAnyMap":
			s.AddField("string_any_map")
			if s.ReadNil() {
				x.StringAnyMap = nil
				return
			}
			x.StringAnyMap = make(map[string]*types.Any)
			s.ReadStringMap(func(key string) {
				v := gogo.UnmarshalAny(s)
				if s.Err() != nil {
					return
				}
				x.StringAnyMap[key] = v
			})
		}
	})
}

// UnmarshalJSON unmarshals the MessageWithWKTMaps from JSON.
func (x *MessageWithWKTMaps) UnmarshalJSON(b []byte) error {
	return jsonplugin.DefaultUnmarshalerConfig.Unmarshal(b, x)
}
