// Copyright Â© 2021 The Things Industries B.V.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.20.1
// source: wkts.proto

package test

import (
	_ "github.com/TheThingsIndustries/protoc-gen-go-json/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageWithMarshaler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MessageWithMarshaler) Reset() {
	*x = MessageWithMarshaler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wkts_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageWithMarshaler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWithMarshaler) ProtoMessage() {}

func (x *MessageWithMarshaler) ProtoReflect() protoreflect.Message {
	mi := &file_wkts_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageWithMarshaler.ProtoReflect.Descriptor instead.
func (*MessageWithMarshaler) Descriptor() ([]byte, []int) {
	return file_wkts_proto_rawDescGZIP(), []int{0}
}

func (x *MessageWithMarshaler) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type MessageWithoutMarshaler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *MessageWithoutMarshaler) Reset() {
	*x = MessageWithoutMarshaler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wkts_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageWithoutMarshaler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWithoutMarshaler) ProtoMessage() {}

func (x *MessageWithoutMarshaler) ProtoReflect() protoreflect.Message {
	mi := &file_wkts_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageWithoutMarshaler.ProtoReflect.Descriptor instead.
func (*MessageWithoutMarshaler) Descriptor() ([]byte, []int) {
	return file_wkts_proto_rawDescGZIP(), []int{1}
}

func (x *MessageWithoutMarshaler) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type MessageWithWKTs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleValue     *wrapperspb.DoubleValue   `protobuf:"bytes,1,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	DoubleValues    []*wrapperspb.DoubleValue `protobuf:"bytes,2,rep,name=double_values,json=doubleValues,proto3" json:"double_values,omitempty"`
	FloatValue      *wrapperspb.FloatValue    `protobuf:"bytes,3,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	FloatValues     []*wrapperspb.FloatValue  `protobuf:"bytes,4,rep,name=float_values,json=floatValues,proto3" json:"float_values,omitempty"`
	Int32Value      *wrapperspb.Int32Value    `protobuf:"bytes,5,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Int32Values     []*wrapperspb.Int32Value  `protobuf:"bytes,6,rep,name=int32_values,json=int32Values,proto3" json:"int32_values,omitempty"`
	Int64Value      *wrapperspb.Int64Value    `protobuf:"bytes,7,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	Int64Values     []*wrapperspb.Int64Value  `protobuf:"bytes,8,rep,name=int64_values,json=int64Values,proto3" json:"int64_values,omitempty"`
	Uint32Value     *wrapperspb.UInt32Value   `protobuf:"bytes,9,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	Uint32Values    []*wrapperspb.UInt32Value `protobuf:"bytes,10,rep,name=uint32_values,json=uint32Values,proto3" json:"uint32_values,omitempty"`
	Uint64Value     *wrapperspb.UInt64Value   `protobuf:"bytes,11,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	Uint64Values    []*wrapperspb.UInt64Value `protobuf:"bytes,12,rep,name=uint64_values,json=uint64Values,proto3" json:"uint64_values,omitempty"`
	BoolValue       *wrapperspb.BoolValue     `protobuf:"bytes,13,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	BoolValues      []*wrapperspb.BoolValue   `protobuf:"bytes,14,rep,name=bool_values,json=boolValues,proto3" json:"bool_values,omitempty"`
	StringValue     *wrapperspb.StringValue   `protobuf:"bytes,15,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	StringValues    []*wrapperspb.StringValue `protobuf:"bytes,16,rep,name=string_values,json=stringValues,proto3" json:"string_values,omitempty"`
	BytesValue      *wrapperspb.BytesValue    `protobuf:"bytes,17,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	BytesValues     []*wrapperspb.BytesValue  `protobuf:"bytes,18,rep,name=bytes_values,json=bytesValues,proto3" json:"bytes_values,omitempty"`
	EmptyValue      *emptypb.Empty            `protobuf:"bytes,19,opt,name=empty_value,json=emptyValue,proto3" json:"empty_value,omitempty"`
	EmptyValues     []*emptypb.Empty          `protobuf:"bytes,20,rep,name=empty_values,json=emptyValues,proto3" json:"empty_values,omitempty"`
	TimestampValue  *timestamppb.Timestamp    `protobuf:"bytes,21,opt,name=timestamp_value,json=timestampValue,proto3" json:"timestamp_value,omitempty"`
	TimestampValues []*timestamppb.Timestamp  `protobuf:"bytes,22,rep,name=timestamp_values,json=timestampValues,proto3" json:"timestamp_values,omitempty"`
	DurationValue   *durationpb.Duration      `protobuf:"bytes,23,opt,name=duration_value,json=durationValue,proto3" json:"duration_value,omitempty"`
	DurationValues  []*durationpb.Duration    `protobuf:"bytes,24,rep,name=duration_values,json=durationValues,proto3" json:"duration_values,omitempty"`
	FieldMaskValue  *fieldmaskpb.FieldMask    `protobuf:"bytes,25,opt,name=field_mask_value,json=fieldMaskValue,proto3" json:"field_mask_value,omitempty"`
	FieldMaskValues []*fieldmaskpb.FieldMask  `protobuf:"bytes,26,rep,name=field_mask_values,json=fieldMaskValues,proto3" json:"field_mask_values,omitempty"`
	ValueValue      *structpb.Value           `protobuf:"bytes,27,opt,name=value_value,json=valueValue,proto3" json:"value_value,omitempty"`
	ValueValues     []*structpb.Value         `protobuf:"bytes,28,rep,name=value_values,json=valueValues,proto3" json:"value_values,omitempty"`
	ListValueValue  *structpb.ListValue       `protobuf:"bytes,29,opt,name=list_value_value,json=listValueValue,proto3" json:"list_value_value,omitempty"`
	ListValueValues []*structpb.ListValue     `protobuf:"bytes,30,rep,name=list_value_values,json=listValueValues,proto3" json:"list_value_values,omitempty"`
	StructValue     *structpb.Struct          `protobuf:"bytes,31,opt,name=struct_value,json=structValue,proto3" json:"struct_value,omitempty"`
	StructValues    []*structpb.Struct        `protobuf:"bytes,32,rep,name=struct_values,json=structValues,proto3" json:"struct_values,omitempty"`
	AnyValue        *anypb.Any                `protobuf:"bytes,33,opt,name=any_value,json=anyValue,proto3" json:"any_value,omitempty"`
	AnyValues       []*anypb.Any              `protobuf:"bytes,34,rep,name=any_values,json=anyValues,proto3" json:"any_values,omitempty"`
}

func (x *MessageWithWKTs) Reset() {
	*x = MessageWithWKTs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wkts_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageWithWKTs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWithWKTs) ProtoMessage() {}

func (x *MessageWithWKTs) ProtoReflect() protoreflect.Message {
	mi := &file_wkts_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageWithWKTs.ProtoReflect.Descriptor instead.
func (*MessageWithWKTs) Descriptor() ([]byte, []int) {
	return file_wkts_proto_rawDescGZIP(), []int{2}
}

func (x *MessageWithWKTs) GetDoubleValue() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleValue
	}
	return nil
}

func (x *MessageWithWKTs) GetDoubleValues() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleValues
	}
	return nil
}

func (x *MessageWithWKTs) GetFloatValue() *wrapperspb.FloatValue {
	if x != nil {
		return x.FloatValue
	}
	return nil
}

func (x *MessageWithWKTs) GetFloatValues() []*wrapperspb.FloatValue {
	if x != nil {
		return x.FloatValues
	}
	return nil
}

func (x *MessageWithWKTs) GetInt32Value() *wrapperspb.Int32Value {
	if x != nil {
		return x.Int32Value
	}
	return nil
}

func (x *MessageWithWKTs) GetInt32Values() []*wrapperspb.Int32Value {
	if x != nil {
		return x.Int32Values
	}
	return nil
}

func (x *MessageWithWKTs) GetInt64Value() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int64Value
	}
	return nil
}

func (x *MessageWithWKTs) GetInt64Values() []*wrapperspb.Int64Value {
	if x != nil {
		return x.Int64Values
	}
	return nil
}

func (x *MessageWithWKTs) GetUint32Value() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32Value
	}
	return nil
}

func (x *MessageWithWKTs) GetUint32Values() []*wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32Values
	}
	return nil
}

func (x *MessageWithWKTs) GetUint64Value() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64Value
	}
	return nil
}

func (x *MessageWithWKTs) GetUint64Values() []*wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64Values
	}
	return nil
}

func (x *MessageWithWKTs) GetBoolValue() *wrapperspb.BoolValue {
	if x != nil {
		return x.BoolValue
	}
	return nil
}

func (x *MessageWithWKTs) GetBoolValues() []*wrapperspb.BoolValue {
	if x != nil {
		return x.BoolValues
	}
	return nil
}

func (x *MessageWithWKTs) GetStringValue() *wrapperspb.StringValue {
	if x != nil {
		return x.StringValue
	}
	return nil
}

func (x *MessageWithWKTs) GetStringValues() []*wrapperspb.StringValue {
	if x != nil {
		return x.StringValues
	}
	return nil
}

func (x *MessageWithWKTs) GetBytesValue() *wrapperspb.BytesValue {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *MessageWithWKTs) GetBytesValues() []*wrapperspb.BytesValue {
	if x != nil {
		return x.BytesValues
	}
	return nil
}

func (x *MessageWithWKTs) GetEmptyValue() *emptypb.Empty {
	if x != nil {
		return x.EmptyValue
	}
	return nil
}

func (x *MessageWithWKTs) GetEmptyValues() []*emptypb.Empty {
	if x != nil {
		return x.EmptyValues
	}
	return nil
}

func (x *MessageWithWKTs) GetTimestampValue() *timestamppb.Timestamp {
	if x != nil {
		return x.TimestampValue
	}
	return nil
}

func (x *MessageWithWKTs) GetTimestampValues() []*timestamppb.Timestamp {
	if x != nil {
		return x.TimestampValues
	}
	return nil
}

func (x *MessageWithWKTs) GetDurationValue() *durationpb.Duration {
	if x != nil {
		return x.DurationValue
	}
	return nil
}

func (x *MessageWithWKTs) GetDurationValues() []*durationpb.Duration {
	if x != nil {
		return x.DurationValues
	}
	return nil
}

func (x *MessageWithWKTs) GetFieldMaskValue() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMaskValue
	}
	return nil
}

func (x *MessageWithWKTs) GetFieldMaskValues() []*fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMaskValues
	}
	return nil
}

func (x *MessageWithWKTs) GetValueValue() *structpb.Value {
	if x != nil {
		return x.ValueValue
	}
	return nil
}

func (x *MessageWithWKTs) GetValueValues() []*structpb.Value {
	if x != nil {
		return x.ValueValues
	}
	return nil
}

func (x *MessageWithWKTs) GetListValueValue() *structpb.ListValue {
	if x != nil {
		return x.ListValueValue
	}
	return nil
}

func (x *MessageWithWKTs) GetListValueValues() []*structpb.ListValue {
	if x != nil {
		return x.ListValueValues
	}
	return nil
}

func (x *MessageWithWKTs) GetStructValue() *structpb.Struct {
	if x != nil {
		return x.StructValue
	}
	return nil
}

func (x *MessageWithWKTs) GetStructValues() []*structpb.Struct {
	if x != nil {
		return x.StructValues
	}
	return nil
}

func (x *MessageWithWKTs) GetAnyValue() *anypb.Any {
	if x != nil {
		return x.AnyValue
	}
	return nil
}

func (x *MessageWithWKTs) GetAnyValues() []*anypb.Any {
	if x != nil {
		return x.AnyValues
	}
	return nil
}

type MessageWithOneofWKTs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//
	//	*MessageWithOneofWKTs_DoubleValue
	//	*MessageWithOneofWKTs_FloatValue
	//	*MessageWithOneofWKTs_Int32Value
	//	*MessageWithOneofWKTs_Int64Value
	//	*MessageWithOneofWKTs_Uint32Value
	//	*MessageWithOneofWKTs_Uint64Value
	//	*MessageWithOneofWKTs_BoolValue
	//	*MessageWithOneofWKTs_StringValue
	//	*MessageWithOneofWKTs_BytesValue
	//	*MessageWithOneofWKTs_EmptyValue
	//	*MessageWithOneofWKTs_TimestampValue
	//	*MessageWithOneofWKTs_DurationValue
	//	*MessageWithOneofWKTs_FieldMaskValue
	//	*MessageWithOneofWKTs_ValueValue
	//	*MessageWithOneofWKTs_ListValueValue
	//	*MessageWithOneofWKTs_StructValue
	//	*MessageWithOneofWKTs_AnyValue
	Value isMessageWithOneofWKTs_Value `protobuf_oneof:"value"`
}

func (x *MessageWithOneofWKTs) Reset() {
	*x = MessageWithOneofWKTs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wkts_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageWithOneofWKTs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWithOneofWKTs) ProtoMessage() {}

func (x *MessageWithOneofWKTs) ProtoReflect() protoreflect.Message {
	mi := &file_wkts_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageWithOneofWKTs.ProtoReflect.Descriptor instead.
func (*MessageWithOneofWKTs) Descriptor() ([]byte, []int) {
	return file_wkts_proto_rawDescGZIP(), []int{3}
}

func (m *MessageWithOneofWKTs) GetValue() isMessageWithOneofWKTs_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *MessageWithOneofWKTs) GetDoubleValue() *wrapperspb.DoubleValue {
	if x, ok := x.GetValue().(*MessageWithOneofWKTs_DoubleValue); ok {
		return x.DoubleValue
	}
	return nil
}

func (x *MessageWithOneofWKTs) GetFloatValue() *wrapperspb.FloatValue {
	if x, ok := x.GetValue().(*MessageWithOneofWKTs_FloatValue); ok {
		return x.FloatValue
	}
	return nil
}

func (x *MessageWithOneofWKTs) GetInt32Value() *wrapperspb.Int32Value {
	if x, ok := x.GetValue().(*MessageWithOneofWKTs_Int32Value); ok {
		return x.Int32Value
	}
	return nil
}

func (x *MessageWithOneofWKTs) GetInt64Value() *wrapperspb.Int64Value {
	if x, ok := x.GetValue().(*MessageWithOneofWKTs_Int64Value); ok {
		return x.Int64Value
	}
	return nil
}

func (x *MessageWithOneofWKTs) GetUint32Value() *wrapperspb.UInt32Value {
	if x, ok := x.GetValue().(*MessageWithOneofWKTs_Uint32Value); ok {
		return x.Uint32Value
	}
	return nil
}

func (x *MessageWithOneofWKTs) GetUint64Value() *wrapperspb.UInt64Value {
	if x, ok := x.GetValue().(*MessageWithOneofWKTs_Uint64Value); ok {
		return x.Uint64Value
	}
	return nil
}

func (x *MessageWithOneofWKTs) GetBoolValue() *wrapperspb.BoolValue {
	if x, ok := x.GetValue().(*MessageWithOneofWKTs_BoolValue); ok {
		return x.BoolValue
	}
	return nil
}

func (x *MessageWithOneofWKTs) GetStringValue() *wrapperspb.StringValue {
	if x, ok := x.GetValue().(*MessageWithOneofWKTs_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *MessageWithOneofWKTs) GetBytesValue() *wrapperspb.BytesValue {
	if x, ok := x.GetValue().(*MessageWithOneofWKTs_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (x *MessageWithOneofWKTs) GetEmptyValue() *emptypb.Empty {
	if x, ok := x.GetValue().(*MessageWithOneofWKTs_EmptyValue); ok {
		return x.EmptyValue
	}
	return nil
}

func (x *MessageWithOneofWKTs) GetTimestampValue() *timestamppb.Timestamp {
	if x, ok := x.GetValue().(*MessageWithOneofWKTs_TimestampValue); ok {
		return x.TimestampValue
	}
	return nil
}

func (x *MessageWithOneofWKTs) GetDurationValue() *durationpb.Duration {
	if x, ok := x.GetValue().(*MessageWithOneofWKTs_DurationValue); ok {
		return x.DurationValue
	}
	return nil
}

func (x *MessageWithOneofWKTs) GetFieldMaskValue() *fieldmaskpb.FieldMask {
	if x, ok := x.GetValue().(*MessageWithOneofWKTs_FieldMaskValue); ok {
		return x.FieldMaskValue
	}
	return nil
}

func (x *MessageWithOneofWKTs) GetValueValue() *structpb.Value {
	if x, ok := x.GetValue().(*MessageWithOneofWKTs_ValueValue); ok {
		return x.ValueValue
	}
	return nil
}

func (x *MessageWithOneofWKTs) GetListValueValue() *structpb.ListValue {
	if x, ok := x.GetValue().(*MessageWithOneofWKTs_ListValueValue); ok {
		return x.ListValueValue
	}
	return nil
}

func (x *MessageWithOneofWKTs) GetStructValue() *structpb.Struct {
	if x, ok := x.GetValue().(*MessageWithOneofWKTs_StructValue); ok {
		return x.StructValue
	}
	return nil
}

func (x *MessageWithOneofWKTs) GetAnyValue() *anypb.Any {
	if x, ok := x.GetValue().(*MessageWithOneofWKTs_AnyValue); ok {
		return x.AnyValue
	}
	return nil
}

type isMessageWithOneofWKTs_Value interface {
	isMessageWithOneofWKTs_Value()
}

type MessageWithOneofWKTs_DoubleValue struct {
	DoubleValue *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type MessageWithOneofWKTs_FloatValue struct {
	FloatValue *wrapperspb.FloatValue `protobuf:"bytes,2,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type MessageWithOneofWKTs_Int32Value struct {
	Int32Value *wrapperspb.Int32Value `protobuf:"bytes,3,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type MessageWithOneofWKTs_Int64Value struct {
	Int64Value *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type MessageWithOneofWKTs_Uint32Value struct {
	Uint32Value *wrapperspb.UInt32Value `protobuf:"bytes,5,opt,name=uint32_value,json=uint32Value,proto3,oneof"`
}

type MessageWithOneofWKTs_Uint64Value struct {
	Uint64Value *wrapperspb.UInt64Value `protobuf:"bytes,6,opt,name=uint64_value,json=uint64Value,proto3,oneof"`
}

type MessageWithOneofWKTs_BoolValue struct {
	BoolValue *wrapperspb.BoolValue `protobuf:"bytes,7,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type MessageWithOneofWKTs_StringValue struct {
	StringValue *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type MessageWithOneofWKTs_BytesValue struct {
	BytesValue *wrapperspb.BytesValue `protobuf:"bytes,9,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

type MessageWithOneofWKTs_EmptyValue struct {
	EmptyValue *emptypb.Empty `protobuf:"bytes,10,opt,name=empty_value,json=emptyValue,proto3,oneof"`
}

type MessageWithOneofWKTs_TimestampValue struct {
	TimestampValue *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=timestamp_value,json=timestampValue,proto3,oneof"`
}

type MessageWithOneofWKTs_DurationValue struct {
	DurationValue *durationpb.Duration `protobuf:"bytes,12,opt,name=duration_value,json=durationValue,proto3,oneof"`
}

type MessageWithOneofWKTs_FieldMaskValue struct {
	FieldMaskValue *fieldmaskpb.FieldMask `protobuf:"bytes,13,opt,name=field_mask_value,json=fieldMaskValue,proto3,oneof"`
}

type MessageWithOneofWKTs_ValueValue struct {
	ValueValue *structpb.Value `protobuf:"bytes,14,opt,name=value_value,json=valueValue,proto3,oneof"`
}

type MessageWithOneofWKTs_ListValueValue struct {
	ListValueValue *structpb.ListValue `protobuf:"bytes,15,opt,name=list_value_value,json=listValueValue,proto3,oneof"`
}

type MessageWithOneofWKTs_StructValue struct {
	StructValue *structpb.Struct `protobuf:"bytes,16,opt,name=struct_value,json=structValue,proto3,oneof"`
}

type MessageWithOneofWKTs_AnyValue struct {
	AnyValue *anypb.Any `protobuf:"bytes,17,opt,name=any_value,json=anyValue,proto3,oneof"`
}

func (*MessageWithOneofWKTs_DoubleValue) isMessageWithOneofWKTs_Value() {}

func (*MessageWithOneofWKTs_FloatValue) isMessageWithOneofWKTs_Value() {}

func (*MessageWithOneofWKTs_Int32Value) isMessageWithOneofWKTs_Value() {}

func (*MessageWithOneofWKTs_Int64Value) isMessageWithOneofWKTs_Value() {}

func (*MessageWithOneofWKTs_Uint32Value) isMessageWithOneofWKTs_Value() {}

func (*MessageWithOneofWKTs_Uint64Value) isMessageWithOneofWKTs_Value() {}

func (*MessageWithOneofWKTs_BoolValue) isMessageWithOneofWKTs_Value() {}

func (*MessageWithOneofWKTs_StringValue) isMessageWithOneofWKTs_Value() {}

func (*MessageWithOneofWKTs_BytesValue) isMessageWithOneofWKTs_Value() {}

func (*MessageWithOneofWKTs_EmptyValue) isMessageWithOneofWKTs_Value() {}

func (*MessageWithOneofWKTs_TimestampValue) isMessageWithOneofWKTs_Value() {}

func (*MessageWithOneofWKTs_DurationValue) isMessageWithOneofWKTs_Value() {}

func (*MessageWithOneofWKTs_FieldMaskValue) isMessageWithOneofWKTs_Value() {}

func (*MessageWithOneofWKTs_ValueValue) isMessageWithOneofWKTs_Value() {}

func (*MessageWithOneofWKTs_ListValueValue) isMessageWithOneofWKTs_Value() {}

func (*MessageWithOneofWKTs_StructValue) isMessageWithOneofWKTs_Value() {}

func (*MessageWithOneofWKTs_AnyValue) isMessageWithOneofWKTs_Value() {}

type MessageWithWKTMaps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringDoubleMap    map[string]*wrapperspb.DoubleValue `protobuf:"bytes,1,rep,name=string_double_map,json=stringDoubleMap,proto3" json:"string_double_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringFloatMap     map[string]*wrapperspb.FloatValue  `protobuf:"bytes,2,rep,name=string_float_map,json=stringFloatMap,proto3" json:"string_float_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringInt32Map     map[string]*wrapperspb.Int32Value  `protobuf:"bytes,3,rep,name=string_int32_map,json=stringInt32Map,proto3" json:"string_int32_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringInt64Map     map[string]*wrapperspb.Int64Value  `protobuf:"bytes,4,rep,name=string_int64_map,json=stringInt64Map,proto3" json:"string_int64_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringUint32Map    map[string]*wrapperspb.UInt32Value `protobuf:"bytes,5,rep,name=string_uint32_map,json=stringUint32Map,proto3" json:"string_uint32_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringUint64Map    map[string]*wrapperspb.UInt64Value `protobuf:"bytes,6,rep,name=string_uint64_map,json=stringUint64Map,proto3" json:"string_uint64_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringBoolMap      map[string]*wrapperspb.BoolValue   `protobuf:"bytes,7,rep,name=string_bool_map,json=stringBoolMap,proto3" json:"string_bool_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringStringMap    map[string]*wrapperspb.StringValue `protobuf:"bytes,8,rep,name=string_string_map,json=stringStringMap,proto3" json:"string_string_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringBytesMap     map[string]*wrapperspb.BytesValue  `protobuf:"bytes,9,rep,name=string_bytes_map,json=stringBytesMap,proto3" json:"string_bytes_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringEmptyMap     map[string]*emptypb.Empty          `protobuf:"bytes,10,rep,name=string_empty_map,json=stringEmptyMap,proto3" json:"string_empty_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringTimestampMap map[string]*timestamppb.Timestamp  `protobuf:"bytes,11,rep,name=string_timestamp_map,json=stringTimestampMap,proto3" json:"string_timestamp_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringDurationMap  map[string]*durationpb.Duration    `protobuf:"bytes,12,rep,name=string_duration_map,json=stringDurationMap,proto3" json:"string_duration_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringFieldMaskMap map[string]*fieldmaskpb.FieldMask  `protobuf:"bytes,13,rep,name=string_field_mask_map,json=stringFieldMaskMap,proto3" json:"string_field_mask_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringValueMap     map[string]*structpb.Value         `protobuf:"bytes,14,rep,name=string_value_map,json=stringValueMap,proto3" json:"string_value_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringListValueMap map[string]*structpb.ListValue     `protobuf:"bytes,15,rep,name=string_list_value_map,json=stringListValueMap,proto3" json:"string_list_value_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringStructMap    map[string]*structpb.Struct        `protobuf:"bytes,16,rep,name=string_struct_map,json=stringStructMap,proto3" json:"string_struct_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringAnyMap       map[string]*anypb.Any              `protobuf:"bytes,17,rep,name=string_any_map,json=stringAnyMap,proto3" json:"string_any_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MessageWithWKTMaps) Reset() {
	*x = MessageWithWKTMaps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_wkts_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageWithWKTMaps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageWithWKTMaps) ProtoMessage() {}

func (x *MessageWithWKTMaps) ProtoReflect() protoreflect.Message {
	mi := &file_wkts_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageWithWKTMaps.ProtoReflect.Descriptor instead.
func (*MessageWithWKTMaps) Descriptor() ([]byte, []int) {
	return file_wkts_proto_rawDescGZIP(), []int{4}
}

func (x *MessageWithWKTMaps) GetStringDoubleMap() map[string]*wrapperspb.DoubleValue {
	if x != nil {
		return x.StringDoubleMap
	}
	return nil
}

func (x *MessageWithWKTMaps) GetStringFloatMap() map[string]*wrapperspb.FloatValue {
	if x != nil {
		return x.StringFloatMap
	}
	return nil
}

func (x *MessageWithWKTMaps) GetStringInt32Map() map[string]*wrapperspb.Int32Value {
	if x != nil {
		return x.StringInt32Map
	}
	return nil
}

func (x *MessageWithWKTMaps) GetStringInt64Map() map[string]*wrapperspb.Int64Value {
	if x != nil {
		return x.StringInt64Map
	}
	return nil
}

func (x *MessageWithWKTMaps) GetStringUint32Map() map[string]*wrapperspb.UInt32Value {
	if x != nil {
		return x.StringUint32Map
	}
	return nil
}

func (x *MessageWithWKTMaps) GetStringUint64Map() map[string]*wrapperspb.UInt64Value {
	if x != nil {
		return x.StringUint64Map
	}
	return nil
}

func (x *MessageWithWKTMaps) GetStringBoolMap() map[string]*wrapperspb.BoolValue {
	if x != nil {
		return x.StringBoolMap
	}
	return nil
}

func (x *MessageWithWKTMaps) GetStringStringMap() map[string]*wrapperspb.StringValue {
	if x != nil {
		return x.StringStringMap
	}
	return nil
}

func (x *MessageWithWKTMaps) GetStringBytesMap() map[string]*wrapperspb.BytesValue {
	if x != nil {
		return x.StringBytesMap
	}
	return nil
}

func (x *MessageWithWKTMaps) GetStringEmptyMap() map[string]*emptypb.Empty {
	if x != nil {
		return x.StringEmptyMap
	}
	return nil
}

func (x *MessageWithWKTMaps) GetStringTimestampMap() map[string]*timestamppb.Timestamp {
	if x != nil {
		return x.StringTimestampMap
	}
	return nil
}

func (x *MessageWithWKTMaps) GetStringDurationMap() map[string]*durationpb.Duration {
	if x != nil {
		return x.StringDurationMap
	}
	return nil
}

func (x *MessageWithWKTMaps) GetStringFieldMaskMap() map[string]*fieldmaskpb.FieldMask {
	if x != nil {
		return x.StringFieldMaskMap
	}
	return nil
}

func (x *MessageWithWKTMaps) GetStringValueMap() map[string]*structpb.Value {
	if x != nil {
		return x.StringValueMap
	}
	return nil
}

func (x *MessageWithWKTMaps) GetStringListValueMap() map[string]*structpb.ListValue {
	if x != nil {
		return x.StringListValueMap
	}
	return nil
}

func (x *MessageWithWKTMaps) GetStringStructMap() map[string]*structpb.Struct {
	if x != nil {
		return x.StringStructMap
	}
	return nil
}

func (x *MessageWithWKTMaps) GetStringAnyMap() map[string]*anypb.Any {
	if x != nil {
		return x.StringAnyMap
	}
	return nil
}

var File_wkts_proto protoreflect.FileDescriptor

var file_wkts_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x77, 0x6b, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x74, 0x68,
	0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x1a, 0x11, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a,
	0x14, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4d, 0x61, 0x72, 0x73,
	0x68, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x3d, 0x0a, 0x17, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75,
	0x74, 0x4d, 0x61, 0x72, 0x73, 0x68, 0x61, 0x6c, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x3a, 0x08, 0xea, 0xaa, 0x19, 0x04, 0x08, 0x00, 0x10, 0x00, 0x22, 0x89,
	0x11, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x57, 0x4b,
	0x54, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3e, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x41, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x0a, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0c, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0b, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x10, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x42, 0x0a, 0x0f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0e,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46,
	0x0a, 0x11, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x0b, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x39, 0x0a, 0x0c, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18,
	0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x46, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x12, 0x31, 0x0a, 0x09, 0x61, 0x6e, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x08, 0x61, 0x6e, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x61, 0x6e, 0x79, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x09, 0x61, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xec, 0x08, 0x0a, 0x14, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x4f, 0x6e, 0x65, 0x6f, 0x66, 0x57,
	0x4b, 0x54, 0x73, 0x12, 0x41, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3b, 0x0a, 0x0a,
	0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x09,
	0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x41, 0x0a, 0x0c, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3e, 0x0a, 0x0b,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0b,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x42,
	0x0a, 0x0e, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0d, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x46, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x6c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3c, 0x0a,
	0x0c, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x09, 0x61,
	0x6e, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x41, 0x6e, 0x79, 0x48, 0x00, 0x52, 0x08, 0x61, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfa, 0x1a, 0x0a, 0x12, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x57, 0x4b, 0x54, 0x4d, 0x61, 0x70, 0x73,
	0x12, 0x68, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x68,
	0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x57, 0x4b, 0x54,
	0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x65, 0x0a, 0x10, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x57, 0x4b, 0x54, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61,
	0x70, 0x12, 0x65, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x68,
	0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x57, 0x4b, 0x54,
	0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x12, 0x65, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6a,
	0x73, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x57, 0x4b, 0x54, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x12,
	0x68, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x68, 0x65,
	0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x57, 0x4b, 0x54, 0x4d,
	0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70, 0x12, 0x68, 0x0a, 0x11, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x57, 0x4b, 0x54, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x4d, 0x61, 0x70, 0x12, 0x62, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x6f,
	0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x74,
	0x68, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x57, 0x4b,
	0x54, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x6f, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x12, 0x68, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6a,
	0x73, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x57, 0x4b, 0x54, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x70, 0x12, 0x65, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x68,
	0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73,
	0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x57, 0x4b, 0x54,
	0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x65, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6a,
	0x73, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x57, 0x69, 0x74, 0x68, 0x57, 0x4b, 0x54, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x12,
	0x71, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e,
	0x74, 0x68, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x57,
	0x4b, 0x54, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4d,
	0x61, 0x70, 0x12, 0x6e, 0x0a, 0x13, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3e, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x57, 0x4b, 0x54, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x12, 0x72, 0x0a, 0x15, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6a, 0x73,
	0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x57, 0x4b, 0x54, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x12, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x4d, 0x61, 0x70, 0x12, 0x65, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3b, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6a, 0x73, 0x6f,
	0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69,
	0x74, 0x68, 0x57, 0x4b, 0x54, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x72, 0x0a,
	0x15, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x74,
	0x68, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x57, 0x4b,
	0x54, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x12, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61,
	0x70, 0x12, 0x68, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x74,
	0x68, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x74, 0x65,
	0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x57, 0x69, 0x74, 0x68, 0x57, 0x4b,
	0x54, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x5f, 0x0a, 0x0e, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6e, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x11, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x74, 0x68, 0x65, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x2e,
	0x6a, 0x73, 0x6f, 0x6e, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x57, 0x4b, 0x54, 0x4d, 0x61, 0x70, 0x73, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x41, 0x6e, 0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x79, 0x4d, 0x61, 0x70, 0x1a, 0x60, 0x0a, 0x14,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e,
	0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e,
	0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x5e,
	0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4d, 0x61, 0x70,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x60,
	0x0a, 0x14, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x60, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5c, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x60, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5e, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x59, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x61, 0x0a,
	0x17, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x5f, 0x0a, 0x16, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x61, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x59, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x61, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x5b, 0x0a, 0x14, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x55, 0x0a, 0x11, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x6e, 0x79, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x40, 0x5a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x68, 0x65, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x73, 0x49, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d,
	0x67, 0x65, 0x6e, 0x2d, 0x67, 0x6f, 0x2d, 0x6a, 0x73, 0x6f, 0x6e, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0xea, 0xaa, 0x19, 0x04, 0x08, 0x01, 0x10, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_wkts_proto_rawDescOnce sync.Once
	file_wkts_proto_rawDescData = file_wkts_proto_rawDesc
)

func file_wkts_proto_rawDescGZIP() []byte {
	file_wkts_proto_rawDescOnce.Do(func() {
		file_wkts_proto_rawDescData = protoimpl.X.CompressGZIP(file_wkts_proto_rawDescData)
	})
	return file_wkts_proto_rawDescData
}

var file_wkts_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_wkts_proto_goTypes = []interface{}{
	(*MessageWithMarshaler)(nil),    // 0: thethings.json.test.MessageWithMarshaler
	(*MessageWithoutMarshaler)(nil), // 1: thethings.json.test.MessageWithoutMarshaler
	(*MessageWithWKTs)(nil),         // 2: thethings.json.test.MessageWithWKTs
	(*MessageWithOneofWKTs)(nil),    // 3: thethings.json.test.MessageWithOneofWKTs
	(*MessageWithWKTMaps)(nil),      // 4: thethings.json.test.MessageWithWKTMaps
	nil,                             // 5: thethings.json.test.MessageWithWKTMaps.StringDoubleMapEntry
	nil,                             // 6: thethings.json.test.MessageWithWKTMaps.StringFloatMapEntry
	nil,                             // 7: thethings.json.test.MessageWithWKTMaps.StringInt32MapEntry
	nil,                             // 8: thethings.json.test.MessageWithWKTMaps.StringInt64MapEntry
	nil,                             // 9: thethings.json.test.MessageWithWKTMaps.StringUint32MapEntry
	nil,                             // 10: thethings.json.test.MessageWithWKTMaps.StringUint64MapEntry
	nil,                             // 11: thethings.json.test.MessageWithWKTMaps.StringBoolMapEntry
	nil,                             // 12: thethings.json.test.MessageWithWKTMaps.StringStringMapEntry
	nil,                             // 13: thethings.json.test.MessageWithWKTMaps.StringBytesMapEntry
	nil,                             // 14: thethings.json.test.MessageWithWKTMaps.StringEmptyMapEntry
	nil,                             // 15: thethings.json.test.MessageWithWKTMaps.StringTimestampMapEntry
	nil,                             // 16: thethings.json.test.MessageWithWKTMaps.StringDurationMapEntry
	nil,                             // 17: thethings.json.test.MessageWithWKTMaps.StringFieldMaskMapEntry
	nil,                             // 18: thethings.json.test.MessageWithWKTMaps.StringValueMapEntry
	nil,                             // 19: thethings.json.test.MessageWithWKTMaps.StringListValueMapEntry
	nil,                             // 20: thethings.json.test.MessageWithWKTMaps.StringStructMapEntry
	nil,                             // 21: thethings.json.test.MessageWithWKTMaps.StringAnyMapEntry
	(*wrapperspb.DoubleValue)(nil),  // 22: google.protobuf.DoubleValue
	(*wrapperspb.FloatValue)(nil),   // 23: google.protobuf.FloatValue
	(*wrapperspb.Int32Value)(nil),   // 24: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),   // 25: google.protobuf.Int64Value
	(*wrapperspb.UInt32Value)(nil),  // 26: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil),  // 27: google.protobuf.UInt64Value
	(*wrapperspb.BoolValue)(nil),    // 28: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),  // 29: google.protobuf.StringValue
	(*wrapperspb.BytesValue)(nil),   // 30: google.protobuf.BytesValue
	(*emptypb.Empty)(nil),           // 31: google.protobuf.Empty
	(*timestamppb.Timestamp)(nil),   // 32: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),     // 33: google.protobuf.Duration
	(*fieldmaskpb.FieldMask)(nil),   // 34: google.protobuf.FieldMask
	(*structpb.Value)(nil),          // 35: google.protobuf.Value
	(*structpb.ListValue)(nil),      // 36: google.protobuf.ListValue
	(*structpb.Struct)(nil),         // 37: google.protobuf.Struct
	(*anypb.Any)(nil),               // 38: google.protobuf.Any
}
var file_wkts_proto_depIdxs = []int32{
	22, // 0: thethings.json.test.MessageWithWKTs.double_value:type_name -> google.protobuf.DoubleValue
	22, // 1: thethings.json.test.MessageWithWKTs.double_values:type_name -> google.protobuf.DoubleValue
	23, // 2: thethings.json.test.MessageWithWKTs.float_value:type_name -> google.protobuf.FloatValue
	23, // 3: thethings.json.test.MessageWithWKTs.float_values:type_name -> google.protobuf.FloatValue
	24, // 4: thethings.json.test.MessageWithWKTs.int32_value:type_name -> google.protobuf.Int32Value
	24, // 5: thethings.json.test.MessageWithWKTs.int32_values:type_name -> google.protobuf.Int32Value
	25, // 6: thethings.json.test.MessageWithWKTs.int64_value:type_name -> google.protobuf.Int64Value
	25, // 7: thethings.json.test.MessageWithWKTs.int64_values:type_name -> google.protobuf.Int64Value
	26, // 8: thethings.json.test.MessageWithWKTs.uint32_value:type_name -> google.protobuf.UInt32Value
	26, // 9: thethings.json.test.MessageWithWKTs.uint32_values:type_name -> google.protobuf.UInt32Value
	27, // 10: thethings.json.test.MessageWithWKTs.uint64_value:type_name -> google.protobuf.UInt64Value
	27, // 11: thethings.json.test.MessageWithWKTs.uint64_values:type_name -> google.protobuf.UInt64Value
	28, // 12: thethings.json.test.MessageWithWKTs.bool_value:type_name -> google.protobuf.BoolValue
	28, // 13: thethings.json.test.MessageWithWKTs.bool_values:type_name -> google.protobuf.BoolValue
	29, // 14: thethings.json.test.MessageWithWKTs.string_value:type_name -> google.protobuf.StringValue
	29, // 15: thethings.json.test.MessageWithWKTs.string_values:type_name -> google.protobuf.StringValue
	30, // 16: thethings.json.test.MessageWithWKTs.bytes_value:type_name -> google.protobuf.BytesValue
	30, // 17: thethings.json.test.MessageWithWKTs.bytes_values:type_name -> google.protobuf.BytesValue
	31, // 18: thethings.json.test.MessageWithWKTs.empty_value:type_name -> google.protobuf.Empty
	31, // 19: thethings.json.test.MessageWithWKTs.empty_values:type_name -> google.protobuf.Empty
	32, // 20: thethings.json.test.MessageWithWKTs.timestamp_value:type_name -> google.protobuf.Timestamp
	32, // 21: thethings.json.test.MessageWithWKTs.timestamp_values:type_name -> google.protobuf.Timestamp
	33, // 22: thethings.json.test.MessageWithWKTs.duration_value:type_name -> google.protobuf.Duration
	33, // 23: thethings.json.test.MessageWithWKTs.duration_values:type_name -> google.protobuf.Duration
	34, // 24: thethings.json.test.MessageWithWKTs.field_mask_value:type_name -> google.protobuf.FieldMask
	34, // 25: thethings.json.test.MessageWithWKTs.field_mask_values:type_name -> google.protobuf.FieldMask
	35, // 26: thethings.json.test.MessageWithWKTs.value_value:type_name -> google.protobuf.Value
	35, // 27: thethings.json.test.MessageWithWKTs.value_values:type_name -> google.protobuf.Value
	36, // 28: thethings.json.test.MessageWithWKTs.list_value_value:type_name -> google.protobuf.ListValue
	36, // 29: thethings.json.test.MessageWithWKTs.list_value_values:type_name -> google.protobuf.ListValue
	37, // 30: thethings.json.test.MessageWithWKTs.struct_value:type_name -> google.protobuf.Struct
	37, // 31: thethings.json.test.MessageWithWKTs.struct_values:type_name -> google.protobuf.Struct
	38, // 32: thethings.json.test.MessageWithWKTs.any_value:type_name -> google.protobuf.Any
	38, // 33: thethings.json.test.MessageWithWKTs.any_values:type_name -> google.protobuf.Any
	22, // 34: thethings.json.test.MessageWithOneofWKTs.double_value:type_name -> google.protobuf.DoubleValue
	23, // 35: thethings.json.test.MessageWithOneofWKTs.float_value:type_name -> google.protobuf.FloatValue
	24, // 36: thethings.json.test.MessageWithOneofWKTs.int32_value:type_name -> google.protobuf.Int32Value
	25, // 37: thethings.json.test.MessageWithOneofWKTs.int64_value:type_name -> google.protobuf.Int64Value
	26, // 38: thethings.json.test.MessageWithOneofWKTs.uint32_value:type_name -> google.protobuf.UInt32Value
	27, // 39: thethings.json.test.MessageWithOneofWKTs.uint64_value:type_name -> google.protobuf.UInt64Value
	28, // 40: thethings.json.test.MessageWithOneofWKTs.bool_value:type_name -> google.protobuf.BoolValue
	29, // 41: thethings.json.test.MessageWithOneofWKTs.string_value:type_name -> google.protobuf.StringValue
	30, // 42: thethings.json.test.MessageWithOneofWKTs.bytes_value:type_name -> google.protobuf.BytesValue
	31, // 43: thethings.json.test.MessageWithOneofWKTs.empty_value:type_name -> google.protobuf.Empty
	32, // 44: thethings.json.test.MessageWithOneofWKTs.timestamp_value:type_name -> google.protobuf.Timestamp
	33, // 45: thethings.json.test.MessageWithOneofWKTs.duration_value:type_name -> google.protobuf.Duration
	34, // 46: thethings.json.test.MessageWithOneofWKTs.field_mask_value:type_name -> google.protobuf.FieldMask
	35, // 47: thethings.json.test.MessageWithOneofWKTs.value_value:type_name -> google.protobuf.Value
	36, // 48: thethings.json.test.MessageWithOneofWKTs.list_value_value:type_name -> google.protobuf.ListValue
	37, // 49: thethings.json.test.MessageWithOneofWKTs.struct_value:type_name -> google.protobuf.Struct
	38, // 50: thethings.json.test.MessageWithOneofWKTs.any_value:type_name -> google.protobuf.Any
	5,  // 51: thethings.json.test.MessageWithWKTMaps.string_double_map:type_name -> thethings.json.test.MessageWithWKTMaps.StringDoubleMapEntry
	6,  // 52: thethings.json.test.MessageWithWKTMaps.string_float_map:type_name -> thethings.json.test.MessageWithWKTMaps.StringFloatMapEntry
	7,  // 53: thethings.json.test.MessageWithWKTMaps.string_int32_map:type_name -> thethings.json.test.MessageWithWKTMaps.StringInt32MapEntry
	8,  // 54: thethings.json.test.MessageWithWKTMaps.string_int64_map:type_name -> thethings.json.test.MessageWithWKTMaps.StringInt64MapEntry
	9,  // 55: thethings.json.test.MessageWithWKTMaps.string_uint32_map:type_name -> thethings.json.test.MessageWithWKTMaps.StringUint32MapEntry
	10, // 56: thethings.json.test.MessageWithWKTMaps.string_uint64_map:type_name -> thethings.json.test.MessageWithWKTMaps.StringUint64MapEntry
	11, // 57: thethings.json.test.MessageWithWKTMaps.string_bool_map:type_name -> thethings.json.test.MessageWithWKTMaps.StringBoolMapEntry
	12, // 58: thethings.json.test.MessageWithWKTMaps.string_string_map:type_name -> thethings.json.test.MessageWithWKTMaps.StringStringMapEntry
	13, // 59: thethings.json.test.MessageWithWKTMaps.string_bytes_map:type_name -> thethings.json.test.MessageWithWKTMaps.StringBytesMapEntry
	14, // 60: thethings.json.test.MessageWithWKTMaps.string_empty_map:type_name -> thethings.json.test.MessageWithWKTMaps.StringEmptyMapEntry
	15, // 61: thethings.json.test.MessageWithWKTMaps.string_timestamp_map:type_name -> thethings.json.test.MessageWithWKTMaps.StringTimestampMapEntry
	16, // 62: thethings.json.test.MessageWithWKTMaps.string_duration_map:type_name -> thethings.json.test.MessageWithWKTMaps.StringDurationMapEntry
	17, // 63: thethings.json.test.MessageWithWKTMaps.string_field_mask_map:type_name -> thethings.json.test.MessageWithWKTMaps.StringFieldMaskMapEntry
	18, // 64: thethings.json.test.MessageWithWKTMaps.string_value_map:type_name -> thethings.json.test.MessageWithWKTMaps.StringValueMapEntry
	19, // 65: thethings.json.test.MessageWithWKTMaps.string_list_value_map:type_name -> thethings.json.test.MessageWithWKTMaps.StringListValueMapEntry
	20, // 66: thethings.json.test.MessageWithWKTMaps.string_struct_map:type_name -> thethings.json.test.MessageWithWKTMaps.StringStructMapEntry
	21, // 67: thethings.json.test.MessageWithWKTMaps.string_any_map:type_name -> thethings.json.test.MessageWithWKTMaps.StringAnyMapEntry
	22, // 68: thethings.json.test.MessageWithWKTMaps.StringDoubleMapEntry.value:type_name -> google.protobuf.DoubleValue
	23, // 69: thethings.json.test.MessageWithWKTMaps.StringFloatMapEntry.value:type_name -> google.protobuf.FloatValue
	24, // 70: thethings.json.test.MessageWithWKTMaps.StringInt32MapEntry.value:type_name -> google.protobuf.Int32Value
	25, // 71: thethings.json.test.MessageWithWKTMaps.StringInt64MapEntry.value:type_name -> google.protobuf.Int64Value
	26, // 72: thethings.json.test.MessageWithWKTMaps.StringUint32MapEntry.value:type_name -> google.protobuf.UInt32Value
	27, // 73: thethings.json.test.MessageWithWKTMaps.StringUint64MapEntry.value:type_name -> google.protobuf.UInt64Value
	28, // 74: thethings.json.test.MessageWithWKTMaps.StringBoolMapEntry.value:type_name -> google.protobuf.BoolValue
	29, // 75: thethings.json.test.MessageWithWKTMaps.StringStringMapEntry.value:type_name -> google.protobuf.StringValue
	30, // 76: thethings.json.test.MessageWithWKTMaps.StringBytesMapEntry.value:type_name -> google.protobuf.BytesValue
	31, // 77: thethings.json.test.MessageWithWKTMaps.StringEmptyMapEntry.value:type_name -> google.protobuf.Empty
	32, // 78: thethings.json.test.MessageWithWKTMaps.StringTimestampMapEntry.value:type_name -> google.protobuf.Timestamp
	33, // 79: thethings.json.test.MessageWithWKTMaps.StringDurationMapEntry.value:type_name -> google.protobuf.Duration
	34, // 80: thethings.json.test.MessageWithWKTMaps.StringFieldMaskMapEntry.value:type_name -> google.protobuf.FieldMask
	35, // 81: thethings.json.test.MessageWithWKTMaps.StringValueMapEntry.value:type_name -> google.protobuf.Value
	36, // 82: thethings.json.test.MessageWithWKTMaps.StringListValueMapEntry.value:type_name -> google.protobuf.ListValue
	37, // 83: thethings.json.test.MessageWithWKTMaps.StringStructMapEntry.value:type_name -> google.protobuf.Struct
	38, // 84: thethings.json.test.MessageWithWKTMaps.StringAnyMapEntry.value:type_name -> google.protobuf.Any
	85, // [85:85] is the sub-list for method output_type
	85, // [85:85] is the sub-list for method input_type
	85, // [85:85] is the sub-list for extension type_name
	85, // [85:85] is the sub-list for extension extendee
	0,  // [0:85] is the sub-list for field type_name
}

func init() { file_wkts_proto_init() }
func file_wkts_proto_init() {
	if File_wkts_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_wkts_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageWithMarshaler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wkts_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageWithoutMarshaler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wkts_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageWithWKTs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wkts_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageWithOneofWKTs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_wkts_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageWithWKTMaps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_wkts_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*MessageWithOneofWKTs_DoubleValue)(nil),
		(*MessageWithOneofWKTs_FloatValue)(nil),
		(*MessageWithOneofWKTs_Int32Value)(nil),
		(*MessageWithOneofWKTs_Int64Value)(nil),
		(*MessageWithOneofWKTs_Uint32Value)(nil),
		(*MessageWithOneofWKTs_Uint64Value)(nil),
		(*MessageWithOneofWKTs_BoolValue)(nil),
		(*MessageWithOneofWKTs_StringValue)(nil),
		(*MessageWithOneofWKTs_BytesValue)(nil),
		(*MessageWithOneofWKTs_EmptyValue)(nil),
		(*MessageWithOneofWKTs_TimestampValue)(nil),
		(*MessageWithOneofWKTs_DurationValue)(nil),
		(*MessageWithOneofWKTs_FieldMaskValue)(nil),
		(*MessageWithOneofWKTs_ValueValue)(nil),
		(*MessageWithOneofWKTs_ListValueValue)(nil),
		(*MessageWithOneofWKTs_StructValue)(nil),
		(*MessageWithOneofWKTs_AnyValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_wkts_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wkts_proto_goTypes,
		DependencyIndexes: file_wkts_proto_depIdxs,
		MessageInfos:      file_wkts_proto_msgTypes,
	}.Build()
	File_wkts_proto = out.File
	file_wkts_proto_rawDesc = nil
	file_wkts_proto_goTypes = nil
	file_wkts_proto_depIdxs = nil
}
